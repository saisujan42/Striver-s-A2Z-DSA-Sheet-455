1. Using BFS Traversal
   Using Queue to Store Indices

TC : O(N * M) -> At worst case, all Grids of Matrix are Visited
SC : O(N * M) 

class Solution {
public:
    vector<int> X = {-1, 1, 0, 0};
    vector<int> Y = {0, 0, -1, 1};
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) 
    {
        if(image[sr][sc] == color)
            return image;

        int n = image.size();
        int m = image[0].size();
        queue<pair<int, int>> Queue;
        
        int OriginalColour = image[sr][sc];
        image[sr][sc] = color;
        Queue.push({sr, sc});

        while(!Queue.empty())
        {
            int Size = Queue.size();
            for(int i = 0; i < Size; i++)
            {
                int x = Queue.front().first;
                int y = Queue.front().second;
                Queue.pop();
                for(int j = 0; j < 4; j++)
                {
                    int row = x + X[j];
                    int col = y + Y[j];
                    if(row >= 0 && row < n && col >= 0 && col < m && image[row][col] == OriginalColour)
                    {
                        Queue.push({row, col});
                        image[row][col] = color;
                    }
                }
            }
        }
        return image;
    }
};