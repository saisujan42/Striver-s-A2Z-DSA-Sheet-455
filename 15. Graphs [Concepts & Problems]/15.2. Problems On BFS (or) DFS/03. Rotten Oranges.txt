1. Using BFS Traversal
   Using Queue to Store Indices of Rotten Oranges

TC : O(2*N*M) -> 1 N*M to Push into Queue, 1 N*M To BFS Traverse 
SC : O(N * M) -> N*M in Worst-Case 

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        int Count = 0, OneCount = 0;
        queue<pair<int, int>> Queue;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 2)
                    Queue.push({i, j});
                else if(grid[i][j] == 1)
                    OneCount++;
            }
        }

        if(OneCount == 0) return 0;
        vector<int> X = {-1, 1, 0, 0};
        vector<int> Y = {0, 0, -1, 1};

        while(!Queue.empty())
        {
            int Size = Queue.size();
            bool RotsInThisLayer = false;
            
            for(int i = 0; i < Size; i++)
            {
                int x = Queue.front().first;
                int y = Queue.front().second;
                Queue.pop();
                for(int j = 0; j < 4; j++)
                {
                    int row = x + X[j];
                    int col = y + Y[j];
                    if(row >= 0 && row < n && col >= 0 && col < m && grid[row][col] == 1)
                    {
                        Queue.push({row, col});
                        grid[row][col] = 2;
                        OneCount--;
                        RotsInThisLayer = true;
                    }
                }
            }
            if(RotsInThisLayer) Count++;
        }
        return OneCount == 0 ? Count : -1;
    }
};