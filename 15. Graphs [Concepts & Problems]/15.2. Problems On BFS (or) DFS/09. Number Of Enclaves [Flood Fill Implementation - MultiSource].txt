1. Using DFS Traversal
   1's Connected to 1's on Boundary Cannot be Traversed

TC : O((N+M) + 2*N*M) -> N+M to Traverse Boundary
                      -> 1 N*M for DFS, 1 N*M to Change 'O's
SC : O(N*M)           -> Visited

class Solution {
public:
    vector<int> X = {-1, 1, 0, 0};
    vector<int> Y = {0, 0, -1, 1};
    void DFS(int i, int j, vector<vector<bool>> &Visited, vector<vector<int>> &grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        Visited[i][j] = true;
        for(int x = 0; x < 4; x++)
        {
            int row = i + X[x];
            int col = j + Y[x];
            
            if(row >= 0 && row < n && col >= 0 && col < m)
            {
                if(grid[row][col] == 1 && !Visited[row][col])
                    DFS(row, col, Visited, grid);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>> Visited(n, vector<bool>(m, false));

        for(int i = 0; i < n; i++)
        {
            if(grid[i][0] == 1 && !Visited[i][0])
                DFS(i, 0, Visited, grid);
            if(grid[i][m - 1] == 1 && !Visited[i][m - 1])
                DFS(i, m - 1, Visited, grid);
        }    

        for(int i = 0; i < m; i++)
        {
            if(grid[0][i] == 1 && !Visited[0][i])
                DFS(0, i, Visited, grid);
            if(grid[n - 1][i] == 1 && !Visited[n - 1][i])
                DFS(n - 1, i, Visited, grid);
        }    

        int Count = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
                if(grid[i][j] == 1 && !Visited[i][j])
                    Count++;
        }
        return Count;
    }
};



2. Using BFS Traversal
   1's Connected to 1's on Boundary Cannot be Traversed

TC : O((N+M) + 2*N*M) -> N+M to Traverse Boundary
                      -> 1 N*M for BFS, 1 N*M to Change 'O's
SC : O(2 * N * M)     -> 1 N*M for Queue, 1 N*M for Visited

class Solution {
public:
    vector<int> X = {-1, 1, 0, 0};
    vector<int> Y = {0, 0, -1, 1};
    void BFS(queue<pair<int, int>> &Queue, vector<vector<bool>> &Visited, vector<vector<int>> &grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        while(!Queue.empty())
        {
            int i = Queue.front().first;
            int j = Queue.front().second;
            Visited[i][j] = true;
            Queue.pop();

            for(int x = 0; x < 4; x++)
            {
                int row = i + X[x];
                int col = j + Y[x];
                if(row >= 0 && row < n && col >= 0 && col < m)
                {
                    if(grid[row][col] == 1 && !Visited[row][col])
                    {
                        Visited[row][col] = true;
                        Queue.push({row, col});
                    }
                }
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>> Visited(n, vector<bool>(m, false));
        queue<pair<int, int>> Queue;

        for(int i = 0; i < n; i++)
        {
            if(grid[i][0] == 1 && !Visited[i][0])
                Queue.push({i, 0});
            if(grid[i][m - 1] == 1 && !Visited[i][m - 1])
                Queue.push({i, m - 1});
        }    

        for(int i = 0; i < m; i++)
        {
            if(grid[0][i] == 1 && !Visited[0][i])
                Queue.push({0, i});
            if(grid[n - 1][i] == 1 && !Visited[n - 1][i])
                Queue.push({n - 1, i});
        }    

        BFS(Queue, Visited, grid);
        int Count = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
                if(grid[i][j] == 1 && !Visited[i][j])
                    Count++;
        }
        return Count;
    }
};