1. Using BFS Algorithm
   Travelling All Nodes Level By Level
   If Any Node is Not Visited Return -1
   Else Return Max Value in Distance Vector

TC : O(V + E)
SC : O(V + E) -> AdjList, Queue
 
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) 
    {
        int m = times.size();
        vector<vector<pair<int, int>>> AdjList(n + 1);
        for(int i = 0; i < m; i++)
        {
            int u = times[i][0];
            int v = times[i][1];
            int w = times[i][2];
            AdjList[u].push_back({v, w});
        }    
        
        vector<int> Distance(n + 1, INT_MAX);
        Distance[k] = 0;
        queue<pair<int, int>> Queue;
        Queue.push({k, 0});

        while(!Queue.empty())
        {
            int Node = Queue.front().first;
            int Weight = Queue.front().second;
            Queue.pop();

            for(auto it : AdjList[Node])
            {
                int AdjNode = it.first;
                int EdgeWeight = it.second;
                
                if(Weight + EdgeWeight < Distance[AdjNode])
                {
                    Distance[AdjNode] = Weight + EdgeWeight;
                    Queue.push({AdjNode, Distance[AdjNode]});
                }
            }
        }

        int Time = INT_MIN;
        for(int i = 1; i <= n; i++)
        {
            if(Distance[i] == INT_MAX)
                return -1;
            else 
                Time = max(Time, Distance[i]);
        }
        return Time;
    }
};



2. Using Dijkstra's ALgorithm
   Using Priority Queue
   (Using Priority Queue instead of Queue, Rest All Same as BFS Approach)

TC : O(E LogV)
SC : O(V + E + V) -> V+E for AdjList, V for PQ

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) 
    {
        int m = times.size();
        vector<vector<pair<int, int>>> AdjList(n + 1);
        for(int i = 0; i < m; i++)
        {
            int u = times[i][0];
            int v = times[i][1];
            int w = times[i][2];
            AdjList[u].push_back({v, w});
        }    
        
        vector<int> Distance(n + 1, INT_MAX);
        Distance[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> PQ;
        PQ.push({k, 0});

        while(!PQ.empty())
        {
            int Node = PQ.top().first;
            int Weight = PQ.top().second;
            PQ.pop();

            for(auto it : AdjList[Node])
            {
                int AdjNode = it.first;
                int EdgeWeight = it.second;
                
                if(Weight + EdgeWeight < Distance[AdjNode])
                {
                    Distance[AdjNode] = Weight + EdgeWeight;
                    PQ.push({AdjNode, Distance[AdjNode]});
                }
            }
        }

        int Time = INT_MIN;
        for(int i = 1; i <= n; i++)
        {
            if(Distance[i] == INT_MAX)
                return -1;
            else 
                Time = max(Time, Distance[i]);
        }
        return Time;
    }
};
