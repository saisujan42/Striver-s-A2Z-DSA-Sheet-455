1. Using Dijkstra's Algorithm
   Using Priority Queue to Find Shortest Paths
   Maintaining Paths Vector to Count Shortest Paths

TC : O(E LogV)
SC : O(V+E + 2V) -> V+E for Queue, 2V for Dist & Paths

class Solution {
public:
    int MOD = 1e9 + 7;
    int countPaths(int n, vector<vector<int>>& roads) 
    {
        int m = roads.size();
        vector<vector<pair<int, int>>> AdjList(n);
        for(int i = 0; i < m; i++)
        {
            int u = roads[i][0];
            int v = roads[i][1];
            int w = roads[i][2];
            AdjList[u].push_back({v, w});
            AdjList[v].push_back({u, w});
        }    

        vector<long long int> Paths(n, 0);
        Paths[0] = 1;
        vector<long long int> Distance(n, LLONG_MAX);
        Distance[0] = 0;

        priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> PQ;
        PQ.push({0, 0});

        while(!PQ.empty())
        {
            long long Dist = PQ.top().first;
            int Node = PQ.top().second;
            PQ.pop();

            for(auto it : AdjList[Node])
            {
                int AdjNode = it.first;
                int EdgeWeight = it.second;

                if(Dist + EdgeWeight < Distance[AdjNode])
                {
                    Distance[AdjNode] = Dist + EdgeWeight;
                    Paths[AdjNode] = Paths[Node];
                    PQ.push({Distance[AdjNode], AdjNode});
                }
                else if(Dist + EdgeWeight == Distance[AdjNode])
                    Paths[AdjNode] = (Paths[AdjNode] + Paths[Node]) % MOD;
            }
        }
        return Paths[n - 1];
    }
};