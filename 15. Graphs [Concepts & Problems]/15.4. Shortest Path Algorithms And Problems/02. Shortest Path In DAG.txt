1. Using Topological Sort
   Find Topologgical Sort and Store in Stack
   Pop Stack Elements to Find Shortest Distance

TC : O(V + 2*(V+E))    V   -> Building AdjList
		       V+E -> Topological Sort, Finding Shortest Distance

SC : O(3V + (V+E))     V   -> Visited, Stack, Distance
                       V+E -> AdjList

class Solution 
{
    public:
    void TopoSort(int Node, vector<bool> &Visited, stack<int> &Stack, vector<vector<pair<int, int>>> &adjList)
    {
        Visited[Node] = true;
        for(auto it : adjList[Node])
        {
            int v = it.first;
            if(!Visited[v])
                TopoSort(v, Visited, Stack, adjList);
        }
        Stack.push(Node);
    }
    vector<int> FindDistance(stack<int> &Stack, vector<vector<pair<int, int>>> &adjList)
    {
        int V = adjList.size();
        vector<int> Distance(V, INT_MAX);
        Distance[0] = 0;
        while(!Stack.empty())
        {
            int Node = Stack.top();
            Stack.pop();
            
            for(auto it : adjList[Node])
            {
                int v = it.first;
                int wt = it.second;
                if(Distance[Node] + wt < Distance[v])
                    Distance[v] = Distance[Node] + wt;
            }
        }
        for(int i = 0; i < V; i++)
            if(Distance[i] == INT_MAX)
                Distance[i] = -1;
        return Distance;
    }
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) 
    {
        vector<vector<pair<int, int>>> adjList(V);
        for(int i = 0; i < E; i++)
        {
            int u = edges[i][0];
            int v = edges[i][1];
            int w = edges[i][2];
            adjList[u].push_back({v, w});
        }
        
        vector<bool> Visited(V, false);
        stack<int> Stack;
        TopoSort(0, Visited, Stack, adjList);
        return FindDistance(Stack, adjList);
    }
};