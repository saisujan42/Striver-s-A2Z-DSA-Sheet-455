1. Using Dijkstra's Algorithm (Slightly Modified)
   Taking Stops as Parameter for Pushing into Queue
   Instead of Distance

TC : O(E LogV)
SC : O(E LogV + 2V) -> ELogV for AdjList, 2V for Queue & Dist

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) 
    {
        int m = flights.size();
        vector<vector<pair<int, int>>> AdjList(n);
        for(int i  = 0; i < m; i++)   
        {
            int u = flights[i][0];
            int v = flights[i][1];
            int w = flights[i][2];
            AdjList[u].push_back({v, w});
        } 

        vector<int> Distance(n, INT_MAX);
        Distance[src] = 0;
        queue<pair<int, pair<int, int>>> Queue;         //{Stops, {Node, Weight}}
        Queue.push({0, {src, 0}});

        while(!Queue.empty())
        {
            int Stops = Queue.front().first;
            int Node = Queue.front().second.first;
            int Cost = Queue.front().second.second;
            Queue.pop();

            if(Stops > k + 1)
                continue;
            
            for(auto it : AdjList[Node])
            {
                int adjNode = it.first;
                int Weight = it.second;

                if(Cost + Weight < Distance[adjNode] && Stops <= k)
                {
                    Distance[adjNode] = Cost + Weight;
                    Queue.push({Stops + 1, {adjNode, Distance[adjNode]}});
                }
            }
        }
        if(Distance[dst] == INT_MAX)
            return -1;
        return Distance[dst];
    }
};