1. Using BFS Traversal & Queue
   Using Distance Matrix to Store Min Distance
   If grid[n-1][n-1] is Reached Return Distance+1

TC : O(N*N)   -> BFS Traversal of Grid
SC : O(2*N*N) -> Distance Matrix, Queue

class Solution 
{
    public:
    vector<int> X = {-1, -1, 0, 1, 1, 1, 0, -1};   // Clockwise Starting From Up
    vector<int> Y = {0, 1, 1, 1, 0, -1, -1, -1};

    int shortestPathBinaryMatrix(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        if(grid[0][0] == 1) return -1;
        if(n == 1 && grid[0][0] == 0) return 1;

        vector<vector<int>> Distance(n, vector<int>(n, INT_MAX));
        Distance[0][0] = 0;

        queue<pair<int, pair<int, int>>> Queue;
        Queue.push({1, {0, 0}});

        while(!Queue.empty())
        {
            int Dist = Queue.front().first;
            int i = Queue.front().second.first;
            int j = Queue.front().second.second;
            Queue.pop();

            for(int x = 0; x < 8; x++)
            {
                int row = i + X[x];
                int col = j + Y[x];

                if(row >= 0 && row < n && col >= 0 && col < n)
                {
                    if(grid[row][col] == 0 && Dist + 1 < Distance[row][col])
                    {
                        Distance[row][col] = Dist + 1;
                        if(row == n - 1 && col == n - 1)
                            return Dist + 1;
                        Queue.push({Dist + 1, {row, col}});
                    }
                }
            }
        } 
        return -1;
    }
};



2. Using BFS Traversal & Queue
   Same Approach as Above, But Without Using Distance Matrix
   Modifying Grid itself to Store Distances

TC : O(N*N) -> BFS Traversal
SC : O(N*N) -> Queue

class Solution 
{
    public:
    vector<int> X = {-1, -1, 0, 1, 1, 1, 0, -1};   // Clockwise Starting From Up
    vector<int> Y = {0, 1, 1, 1, 0, -1, -1, -1};

    int shortestPathBinaryMatrix(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        if(grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
        if(n == 1 && grid[0][0] == 0) return 1;

        queue<pair<int, int>> Queue;
        Queue.push({0, 0});
        grid[0][0] = 1;

        while(!Queue.empty())
        {
            int i = Queue.front().first;
            int j = Queue.front().second;
            int Dist = grid[i][j];
            Queue.pop();

            for(int x = 0; x < 8; x++)
            {
                int row = i + X[x];
                int col = j + Y[x];

                if(row >= 0 && row < n && col >= 0 && col < n)
                {
                    if(grid[row][col] == 0)
                    {
                        grid[row][col] = Dist + 1;
                        if(row == n - 1 && col == n - 1)
                            return Dist + 1;
                        Queue.push({row, col});
                    }
                }
            }
        } 
        return -1;
    }
};