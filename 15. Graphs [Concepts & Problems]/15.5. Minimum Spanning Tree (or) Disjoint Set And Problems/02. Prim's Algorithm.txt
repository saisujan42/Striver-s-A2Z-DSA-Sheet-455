1. Prim's Algorithm
   Using Priority Queue
   To Find Minimum Spanning Tree
   (In this Question, Only Sum of MST Edges was Asked)
   (If Entire MST should be returned, Put Parent Node along With Node in Priority Queue)

TC : O((V+E)LogV) 
TC : O(E LogV)     -> If Connected Graph, E >= V - 1 (Worst Case)
SC : O(2V)         -> Queue, Visited

class Solution 
{
    public:
    int spanningTree(int V, vector<vector<int>> adj[]) 
    {
        vector<bool> Visited(V, false);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> PQ;
        PQ.push({0, 0});
        
        int Sum = 0;
        while(!PQ.empty())
        {
            int Weight = PQ.top().first;
            int Node = PQ.top().second;
            PQ.pop();
            
            if(Visited[Node]) continue;
            Visited[Node] = true;
            Sum += Weight;
            
            for(auto it : adj[Node])
            {
                int AdjNode = it[0];  
                int EdgeWeight = it[1];
                
                if(!Visited[AdjNode])
                    PQ.push({EdgeWeight, AdjNode});
            }
        }
        return Sum;
    }
};