1. Brute Force Approach
TC : O(N^2) SC : O(N) (To Store Answer)    ->  TLE

class Solution
{
    public:
    vector<long long> nextLargerElement(vector<long long> arr, int n)
    {
        vector<long long> Answer;
        for(int i = 0; i < n; i++)
        {
            bool Value = true;
            for(int j = i + 1; j < n; j++)
            {
                if(arr[j] > arr[i])
                {
                    Answer.push_back(arr[j]);
                    Value = false;
                    break;
                }
            }
            if(Value == true)
                Answer.push_back(-1);
        }
        return Answer;
    }
};


2. Using Monotonic Stack
TC : O(2N)   ->   1N for the while loop to pop elements which can be a max of N throughout the program
SC : O(2N)   ->   1N for storing the Answer

class Solution
{
    public:
    vector<long long> nextLargerElement(vector<long long> arr, int n)
    {
        vector<long long> Answer(n);
        stack<long long> Stack;
        for(int i = n - 1; i >= 0; i--)
        {
            while(!Stack.empty() && Stack.top() <= arr[i])
                Stack.pop();
            if(Stack.empty())
                Answer[i] = -1;
            else
                Answer[i] = Stack.top();
            Stack.push(arr[i]);
        }
        return Answer;
    }
};