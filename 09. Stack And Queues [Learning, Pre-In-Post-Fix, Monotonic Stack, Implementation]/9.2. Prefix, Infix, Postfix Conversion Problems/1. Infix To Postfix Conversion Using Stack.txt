1. Infix To Postfix Using Stack
TC : O(2N) SC : O(N)


class Solution {
    public:
    int Precedence(char ch)
    {
        if(ch == '^') return 3;
        if(ch == '/' || ch == '*') return 2;
        if(ch == '+' || ch == '-') return 1;
        return -1;
    }
    string infixToPostfix(string s) 
    {
        int n = s.size();
        stack<char> Stack;
        string Answer;
        
        for(int i = 0; i < n; i++)
        {
            if(isalnum(s[i]))
                Answer += s[i];
            else if(s[i] == '(')
                Stack.push(s[i]);
            else if(s[i] == ')')
            {
                while(!Stack.empty() && Stack.top() != '(')
                {
                    Answer += Stack.top();
                    Stack.pop();
                }
                Stack.pop();
            }
            else
            {
                while(!Stack.empty() && Precedence(s[i]) <= Precedence(Stack.top()))
                {
                    Answer += Stack.top();
                    Stack.pop();
                }
                Stack.push(s[i]);
            }
        }
        while(!Stack.empty())
        {
            Answer += Stack.top();
            Stack.pop();
        }
        return Answer;
    }
};