1. Greedy Algorithm
   (Sorting By Profit & Using Deadline to Assign Job)

TC : O(NLogN + (N * MaxDeadline)) 
SC : O(MaxDeadline)

/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    bool static compare(Job &a, Job &b)
    {
        return a.profit > b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr, arr + n, compare);
        
        int MaxDeadline = 0;
        for(int i = 0; i < n; i++)
            MaxDeadline = max(MaxDeadline, arr[i].dead);
        
        vector<int> Jobs(MaxDeadline + 1, -1);
        int JobCount = 0, MaxProfit = 0;
        
        for(int i = 0; i < n; i++)
        {
            for(int j = arr[i].dead; j > 0; j--)
            {
                if(Jobs[j] == -1)
                {
                    JobCount++;
                    MaxProfit += arr[i].profit;
                    Jobs[j] = arr[i].id;
                    break;
                }
            }
        }
        return {JobCount, MaxProfit};
    } 
};


2. Using Disjoint Set to Optimize Inner Loop