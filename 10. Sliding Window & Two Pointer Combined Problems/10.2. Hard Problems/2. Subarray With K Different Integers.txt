1. Brute Force Approach (Using Set)
TC : O(N^2) SC : O(K)   ->     TLE

class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) 
    {
        int n = nums.size();
        int Count = 0;
        for(int i = 0; i < n; i++)
        {
            set<int> Set;
            for(int j = i; j < n; j++)
            {
                Set.insert(nums[j]);
                if(Set.size() == k)
                    Count++;
                if(Set.size() > k)
                    break;
            }
        }    
        return Count;
    }
};



2. Sliding Window & 2-Pointer Approach
   (No.Of Subarrays <= k - No.Of Subarrays <= k-1)

TC : O(2N + 2N) SC : O(K)

class Solution {
public:
    int CountSubarrays(vector<int> &nums, int k)
    {
        int n = nums.size();
        int Start = 0, End = 0, Count = 0;
        unordered_map<int, int> Map;
        while(End < n)
        {
            Map[nums[End]]++;
            while(Map.size() > k)
            {
                Map[nums[Start]]--;
                if(Map[nums[Start]] == 0)
                    Map.erase(nums[Start]);
                Start++;
            }
            if(Map.size() <= k)
                Count += (End - Start + 1);
            End++;
        }
        return Count;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k) 
    {
        int Count1 = CountSubarrays(nums, k);
        int Count2 = CountSubarrays(nums, k - 1);
        return Count1 - Count2;
    }
};