1. Brute Force Approach
TC : O(N^2) SC : O(1)

class Solution{
  public:
    int longestKSubstr(string s, int k) 
    {
        int n = s.size();
        int MaxLength = -1;
        for(int i = 0; i < n; i++)
        {
            unordered_map<char, int> Map;
            for(int j = i; j < n; j++)
            {
                Map[s[j]]++;
                if(Map.size() == k)
                    MaxLength = max(MaxLength, j - i + 1);
                if(Map.size() > k)
                    break;
            }
        }
        return MaxLength;
    }
};



2. Sliding Window & 2-Pointer Approach
TC : O(2N) SC : O(K)

class Solution{
  public:
    int longestKSubstr(string s, int k) 
    {
        int n = s.size();
        int MaxLength = -1, Start = 0, End = 0;
        unordered_map<char, int> Map;
        while(End < n)
        {
            Map[s[End]]++;
            while(Map.size() > k)
            {
                Map[s[Start]]--;
                if(Map[s[Start]] == 0)
                    Map.erase(s[Start]);
                Start++;
            }
            if(Map.size() == k)
                MaxLength = max(MaxLength, End - Start + 1);
            End++;
        }
        return MaxLength;
    }
};



3. Optimized Sliding Window & 2-Pointer Approach
TC : O(N) SC : O(K)

class Solution{
  public:
    int longestKSubstr(string s, int k) 
    {
        int n = s.size();
        int MaxLength = -1, Start = 0, End = 0;
        unordered_map<char, int> Map;
        while(End < n)
        {
            Map[s[End]]++;
            if(Map.size() > k)          //Optimization Step
            {
                Map[s[Start]]--;
                if(Map[s[Start]] == 0)
                    Map.erase(s[Start]);
                Start++;
            }
            if(Map.size() == k)
                MaxLength = max(MaxLength, End - Start + 1);
            End++;
        }
        return MaxLength;
    }
};