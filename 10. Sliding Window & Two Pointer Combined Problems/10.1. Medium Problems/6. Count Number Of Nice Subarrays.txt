1. Brute Force Approach
TC : O(N^2) SC : O(1)  ->  TLE

class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) 
    {
        int n = nums.size();
        int Count = 0;
        for(int i = 0; i < n; i++)
        {
            int Temp_Count = 0;
            for(int j = i; j < n; j++)
            {
                if(nums[j] % 2 != 0)
                    Temp_Count++;
                if(Temp_Count == k)
                    Count++;
                if(Temp_Count > k) break;
            }
        }    
        return Count;
    }
};



2. Sliding Window & 2-Pointer Approach
   (Using Binary Subarray With Sum Problem)

TC : O(2 * 2N) SC : O(1)

class Solution {
public:
    int CountSubarrays(vector<int> &nums, int goal)
    {
        if(goal < 0) return 0;
        int n = nums.size();
        int Start = 0, End = 0, Count = 0, Sum = 0;    
        while(End < n)
        {
            Sum += (nums[End] % 2);
            while(Sum > goal)
                Sum -= (nums[Start++] % 2);
            Count += (End - Start + 1);
            End++;
        }
        return Count;
    }
    int numberOfSubarrays(vector<int>& nums, int k) 
    {
        int Count1 = CountSubarrays(nums, k);
        int Count2 = CountSubarrays(nums, k - 1);
        return Count1 - Count2;
    }
};