1. Brute Force Approach
TC : O(N^2) SC : O(1)  ->  TLE

class Solution {
public:
    int numberOfSubstrings(string s) 
    {
        int n = s.size();
        int Count = 0;
        for(int i = 0; i < n; i++)
        {
            int a = 0, b = 0, c = 0;
            for(int j = i; j < n; j++)
            {
                if(s[j] == 'a') a++;
                if(s[j] == 'b') b++;
                if(s[j] == 'c') c++;
                if(a != 0 && b != 0 && c != 0)
                    Count++;
            }
        }
        return Count;
    }
};



2. Optimized Brute Force Approach
TC : O(N^2) SC : O(1)  ->  TLE

class Solution {
public:
    int numberOfSubstrings(string s) 
    {
        int n = s.size();
        int Count = 0;
        for(int i = 0; i < n; i++)
        {
            int a = 0, b = 0, c = 0;
            for(int j = i; j < n; j++)
            {
                if(s[j] == 'a') a++;
                if(s[j] == 'b') b++;
                if(s[j] == 'c') c++;
                if(a != 0 && b != 0 && c != 0)
                {
                    Count += (n - j);
                    break;
                }
            }
        }
        return Count;
    }
};




2. By Updating Indexes of a, b, c By Traversing
TC : O(N) SC : O(1)

class Solution {
public:
    int numberOfSubstrings(string s) 
    {
        int n = s.size();
        int Count = 0, a = - 1, b = -1, c = -1;
        for(int i = 0; i < n; i++)
        {
            if(s[i] == 'a') a = i;
            if(s[i] == 'b') b = i;
            if(s[i] == 'c') c = i;

            if(a != -1 && b != -1 && c != -1)
            {
                int Subarrays = min(a, min(b, c));
                Count += (Subarrays + 1);
            }
        }
        return Count;
    }
};


