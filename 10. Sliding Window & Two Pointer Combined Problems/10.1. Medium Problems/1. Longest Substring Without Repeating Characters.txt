1. Brute Force Approach
TC : O(N^2) SC : O(N)

class Solution {
public:
    int lengthOfLongestSubstring(string s) 
    {
        int n = s.size();
        int Length = 0;
        for(int i = 0; i < n; i++)
        {
            unordered_map<char, int> Map;
            for(int j = i; j < n; j++)
            {
                if(Map[s[j]] == 1)
                    break;
                Length = max(Length, j - i + 1);
                Map[s[j]]++;
            }
        }    
        return Length;
    }
};


2. Using Sliding Window & 2 Pointer 
   Also Using Map

TC : O(N) SC : O(N)

class Solution {
public:
    int lengthOfLongestSubstring(string s) 
    {
        int n = s.size();
        int MaxLength = 0, Start = 0, End = 0;
        unordered_map<char, int> Map;
        while(End < n)
        {
            if(Map.find(s[End]) != Map.end())
            {
                if(Map[s[End]] >= Start)
                    Start = Map[s[End]] + 1;
            }
            int Length = End - Start + 1;
            MaxLength = max(Length, MaxLength);
            Map[s[End]] = End; 
            End++;
        }
        return MaxLength;
    }
};