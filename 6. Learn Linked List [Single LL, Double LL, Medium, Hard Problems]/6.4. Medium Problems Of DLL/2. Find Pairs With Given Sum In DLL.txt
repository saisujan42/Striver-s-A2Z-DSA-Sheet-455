1. Brute Force Approach'
TC : O(N^2) SC : O(1) (Not Considering Space to Store Answer)

/* Doubly linked list node class
class Node
{
public:
    int data;
    Node *next, *prev;
    Node(int val) : data(val), next(NULL), prev(NULL)
    {
    }
};
*/

class Solution
{
public:
    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
        vector<pair<int, int>> Answer;
        Node *First = head, *Second = head -> next;
        while(First != NULL)
        {
            Second = First -> next;
            while(Second != NULL)
            {
                if(First -> data + Second -> data == target)
                    Answer.push_back({First -> data, Second -> data});
                Second = Second -> next;
            }
            First = First -> next;
        }
        return Answer;
    }
};


2. Using Map
TC : O(N + Ans*Log(Ans)) SC : O(N)
Ans = No. of Pairs

/* Doubly linked list node class
class Node
{
public:
    int data;
    Node *next, *prev;
    Node(int val) : data(val), next(NULL), prev(NULL)
    {
    }
};
*/

class Solution
{
public:
    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
        vector<pair<int, int>> Answer;
        unordered_map<int, int> Map;
        Node *Temp = head;
        while(Temp != NULL)
        {
            int Rem = target - Temp -> data;
            if(Map.find(Rem) != Map.end())
                Answer.push_back({Rem, Temp -> data});
            Map[Temp -> data]++;
            Temp = Temp -> next;
        }
        sort(Answer.begin(), Answer.end());
        return Answer;
    }
};


3. Using 2-Pointers
TC : O(2N) SC : O(1)

/* Doubly linked list node class
class Node
{
public:
    int data;
    Node *next, *prev;
    Node(int val) : data(val), next(NULL), prev(NULL)
    {
    }
};
*/

class Solution
{
public:
    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
        vector<pair<int, int>> Answer;
        Node *Left = head, *Right = head;
        while(Right -> next != NULL)
            Right = Right -> next;
            
        while(Left -> data < Right -> data)
        {
            if(Left -> data + Right -> data == target)
            {
                Answer.push_back({Left -> data, Right -> data});
                Left = Left -> next;
                Right = Right -> prev;
            }
            else if(Left -> data + Right -> data > target)
                Right = Right -> prev;
            else
                Left = Left -> next;
        }
        return Answer;
    }
};