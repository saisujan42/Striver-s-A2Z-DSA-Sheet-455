1. Reverse, Add 1, Again Reverse 
TC : O(3N) SC : O(1)

// User function template for C++

/*

struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
    Node* Reverse(Node *head)
    {
        Node *temp = head, *prev = NULL, *front = NULL;
        while(temp != NULL)
        {
            front = temp -> next;
            temp -> next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }
    Node* addOne(Node* head) 
    {
        head = Reverse(head);
        int Carry = 1;
        Node *temp = head;
        while(temp != NULL)
        {
            if(temp -> data + Carry < 10)
            {
                temp -> data = temp -> data + Carry;
                Carry = 0;
                return Reverse(head);
            }
            else
            {
                Carry = 1;
                temp -> data = 0;
                temp = temp -> next;
            }
        }
        if(Carry == 1)
        {
            Node *newNode = new Node(Carry);
            head = Reverse(head);
            newNode -> next = head;
            return newNode;
        }
        head = Reverse(head);
        return head;
    }
};


2. Using Recursion 
TC : O(N) SC : O(1)

// User function template for C++

/*

struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
    int Helper(Node *temp)
    {
        if(temp == NULL)
            return 1;
        int Carry = Helper(temp -> next);
        temp -> data = temp -> data + Carry;
        if(temp -> data < 10)
            return 0;
        temp -> data = 0;
        return 1;
    }
    Node* addOne(Node* head) 
    {
        int Carry = Helper(head);
        if(Carry == 1)
        {
            Node *newNode = new Node(Carry);
            newNode -> next = head;
            return newNode;
        }
        return head;
    }
};