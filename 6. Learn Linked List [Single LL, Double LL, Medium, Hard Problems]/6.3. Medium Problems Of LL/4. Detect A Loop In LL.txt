1. Using Map 
TC : O(N LogN) SC : O(N)
LogN for HashMap Operations

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) 
    {
        if(head == NULL || head -> next == NULL)
            return false;
        unordered_map<ListNode*, bool> Map;
        while(head != NULL)
        {
            if(Map[head] == false)
                Map[head] = true;
            else
                return true;
            head = head -> next;
        }
        return false;
    }
};


2. Tortoise & Hare Method 
TC : O(N) SC : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) 
    {
        if(head == NULL || head -> next == NULL)
            return false;
        ListNode* Slow = head, * Fast = head;
        while(Fast != NULL && Fast -> next != NULL)
        {
            Slow = Slow -> next;
            Fast = Fast -> next -> next;
            if(Slow == Fast)
                return true;
        }
        return false;
    }
};