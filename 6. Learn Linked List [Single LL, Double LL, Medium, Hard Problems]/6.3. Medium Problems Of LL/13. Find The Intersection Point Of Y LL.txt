1. Using Map 
TC : O(N1 + N2) SC : O(N1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
    {
        unordered_map<ListNode*, bool> Map;
        ListNode *temp = headA;
        while(temp != NULL) 
        {
            Map[temp] = true;
            temp = temp -> next;
        }   
        temp = headB;
        while(temp != NULL)
        {
            if(Map.find(temp) != Map.end())
                return temp;
            temp = temp -> next;
        }
        return NULL;
    }
};


2. Find Lengths of 2 LLs and Start From Same Point And Compare
TC : O(N1 + 2*N2) SC : O(1)
Considering, N2 > N1


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* Intersection(ListNode *headA, ListNode *headB, int N)
    {
        while(N--)
            headA = headA -> next;
        while(headA != NULL && headB != NULL)
        {
            if(headA == headB)
                return headA;
            headA = headA -> next;
            headB = headB -> next;
        }
        return NULL;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
    {
        int N1 = 0, N2 = 0;
        ListNode *temp = headA;
        while(temp != NULL)
        {
            N1++;
            temp = temp -> next;
        }
        temp = headB;
        while(temp != NULL)
        {
            N2++;
            temp = temp -> next;
        }
        if(N1 > N2)
            return Intersection(headA, headB, N1 - N2);
        return Intersection(headB, headA, N2 - N1);
    }
};


3. Optimal Approach 
TC : O(N1 + N2) SC : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
    {
        if(headA == NULL || headB == NULL)
            return NULL;
        ListNode *temp1 = headA, *temp2 = headB;
        while(temp1 != temp2)
        {
            temp1 = temp1 -> next;
            temp2 = temp2 -> next;

            if(temp1 == temp2) return temp1;
            if(temp1 == NULL)  temp1 = headB;
            if(temp2 == NULL)  temp2 = headA;
        }
        return temp1;
    }
};