1. By Reversing List & Then Seperately Reversing K & N - K As Groups
TC : O(4N) SC : O(1)
(1N - Counting Nodes, 2N - Reversing Twice, 1N - Finding Kth Node)


class Solution {
public:
    ListNode *Reverse(ListNode *temp)
    {
        ListNode *prev = NULL, *front = NULL;
        while(temp != NULL)
        {
            front = temp -> next;
            temp -> next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }
    int CountNodes(ListNode *head)
    {
        int Count = 0;
        ListNode *temp = head;
        while(temp != NULL)
        {
            Count++;
            temp = temp -> next;
        }
        return Count;
    }
    ListNode *FindKthNode(ListNode *temp, int k)
    {
        for(int i = 1; i < k && temp != NULL; i++)
            temp = temp -> next;
        return temp;
    }
    ListNode* rotateRight(ListNode* head, int k) 
    {
        if(head == NULL || head -> next == NULL)
            return head;
        int n = CountNodes(head);
        k = k % n;
        if(k == 0) return head;
        head = Reverse(head);

        ListNode *KthNode = FindKthNode(head, k);
        ListNode *NextNode = KthNode -> next;
        KthNode -> next = NULL;

        ListNode *NewHead = Reverse(head);
        NextNode = Reverse(NextNode);
        head -> next = NextNode;
        return NewHead;
    }
};



2. By Changing Links From Tail to Head & N-Kth Node to NULL
TC : O(2N) SC : O(1)

class Solution {
public:
    ListNode *FindKthNode(ListNode *head, int k)
    {
        ListNode *temp = head;
        for(int i = 1; i < k; i++)
            temp = temp -> next;
        return temp;
    }
    ListNode* rotateRight(ListNode* head, int k) 
    {
        if(head == NULL || head -> next == NULL)
            return head;
        
        int n = 1;
        ListNode *tail = head;
        while(tail -> next != NULL)
        {
            n++;
            tail = tail -> next;
        }
        
        k = k % n;
        if(k == 0) return head;
        
        tail -> next = head;
        ListNode *KthNode = FindKthNode(head, n - k);
        head = KthNode -> next;
        KthNode -> next = NULL;
        return head;
    }
};