1. Using Map
TC : O(2N) SC : O(N) (Not Consindering another N for Storing Answer)

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) 
    {
        unordered_map<Node*, Node*> Map;
        Node *temp = head;
        while(temp != NULL)
        {
            Node *NewNode = new Node(temp -> val);
            Map[temp] = NewNode;
            temp = temp -> next;
        }
        temp = head;
        while(temp != NULL)
        {
            Node *CopyNode = Map[temp];
            CopyNode -> next = Map[temp -> next];
            CopyNode -> random = Map[temp -> random];
            temp = temp -> next;
        }
        return Map[head];
    }
};



2. Creating Copy Nodes In Between Original Nodes & Linking 
TC : O(3N) SC : O(1) (Not Considering Answer List as Extra Space)

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) 
    {
        Node *temp = head;
        while(temp != NULL)
        {
            Node *NewNode = new Node(temp -> val);
            NewNode -> next = temp -> next;
            temp -> next = NewNode;
            temp = temp -> next -> next;
        }
        temp = head;
        while(temp != NULL)
        {
            Node *CopyNode = temp -> next;
            if(temp -> random != NULL)
                CopyNode -> random = temp -> random -> next;
            else
                CopyNode -> random = NULL;
            temp = temp -> next -> next;
        }
        Node *NewHead = new Node(-1);
        Node *current = NewHead;
        temp = head;
        while(temp != NULL)
        {
            current -> next = temp -> next;
            temp -> next = temp -> next -> next;
            current = current -> next;
            temp = temp -> next;
        }
        return NewHead -> next;
    }
};