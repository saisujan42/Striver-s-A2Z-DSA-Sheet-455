1. Brute Force Approach (Linear Search)
TC : O(N * (Sum - Max + 1)) SC : O(1)       ->     TLE

class Solution {
public:
    bool FindDays(int capacity, int days, vector<int> &weights)
    {
        int n = weights.size();
        int Days = 1, Load = 0;
        for(int i = 0; i < n; i++)
        {
            if(Load + weights[i] > capacity)
            {
                Days += 1;
                Load = weights[i];
            }
            else
                Load += weights[i];
        }
        return Days <= days;
    }
    int shipWithinDays(vector<int>& weights, int days) 
    {
        int n = weights.size();
        int Max = INT_MIN, Sum = 0;
        for(int i = 0; i < n; i++)
        {
            Max = max(weights[i], Max);
            Sum += weights[i];
        }    
        for(int i = Max; i <= Sum; i++)
        {
            if(FindDays(i, days, weights))
                return i;
        }
        return -1;
    }
};


2. Binary Search
TC : O(N * Log(Sum - Max + 1)) SC : O(1)

class Solution {
public:
    bool FindDays(int capacity, int days, vector<int> &weights)
    {
        int n = weights.size();
        int Days = 1, Load = 0;
        for(int i = 0; i < n; i++)
        {
            if(Load + weights[i] > capacity)
            {
                Days += 1;
                Load = weights[i];
            }
            else
                Load += weights[i];
        }
        return Days <= days;
    }
    int shipWithinDays(vector<int>& weights, int days) 
    {
        int n = weights.size();
        int Max = INT_MIN, Sum = 0;
        for(int i = 0; i < n; i++)
        {
            Max = max(weights[i], Max);
            Sum += weights[i];
        }    
        int Low = Max, High = Sum;
        while(Low <= High)
        {
            int Mid = (Low + High) / 2;
            if(FindDays(Mid, days, weights))
                High = Mid - 1;
            else
                Low = Mid + 1;
        }
        return Low;
    }
};