1. Merge 2 Sorted Arrays
TC : O(N1 + N2) SC : O(N1 + N2)

class Solution {
  public:
    int kthElement(int k, vector<int>& arr1, vector<int>& arr2) 
    {
        int n1 = arr1.size();
        int n2 = arr2.size();
        int i = 0, j = 0;
        vector<int> Answer;
        while(i < n1 && j < n2)
        {
            if(arr1[i] < arr2[j])
                Answer.push_back(arr1[i++]);
            else
                Answer.push_back(arr2[j++]);
        }
        while(i < n1)
            Answer.push_back(arr1[i++]);
        while(j < n2)
            Answer.push_back(arr2[j++]);
        return Answer[k - 1];
    }
};


2. Using 2 Pointer Approach
TC : O(K) SC : O(1)

class Solution {
  public:
    int kthElement(int k, vector<int>& arr1, vector<int>& arr2) 
    {
        int n1 = arr1.size();
        int n2 = arr2.size();
        int i = 0, j = 0, Count = 0;
        while(i < n1 && j < n2)
        {
            if(arr1[i] < arr2[j])
            {
                Count++;
                if(Count == k) return arr1[i];
                i++;
            }
            else
            {
                Count++;
                if(Count == k) return arr2[j];
                j++;
            }
        }
        while(i < n1)
        {
            Count++;
            if(Count == k) return arr1[i];
            i++;
        }
        while(j < n2)
        {
            Count++;
            if(Count == k) return arr2[j];
            j++;
        }
        return -1;
    }
};


3. Binary Search
TC : O(Log(Min(N1, N2))) SC : O(1)

class Solution {
  public:
    int kthElement(int k, vector<int>& arr1, vector<int>& arr2) 
    {
        int n1 = arr1.size();
        int n2 = arr2.size();
        if(n2 > n1)
            return kthElement(k, arr2, arr1);
        int Low = max(0, k - n2), High = min(k, n1);
        int Left = k, n = n1 + n2, l1, l2, r1, r2;
        while(Low <= High)
        {
            int Mid1 = (Low + High) / 2;
            int Mid2 = Left - Mid1;
            l1 = l2 = INT_MIN, r1 = r2 = INT_MAX;
            
            if(Mid1 - 1 >= 0) l1 = arr1[Mid1 - 1];
            if(Mid2 - 1 >= 0) l2 = arr2[Mid2 - 1];
            if(Mid1 < n1) r1 = arr1[Mid1];
            if(Mid2 < n2) r2 = arr2[Mid2];
            
            if(l1 <= r2 && l2 <= r1)
                return max(l1, l2);
            if(l1 > r2)
                High = Mid1 - 1;
            else
                Low = Mid1 + 1;
        }
        return -1;
    }
};