1. Brute Force Approach (Linear Search)
TC : O(N * (Sum - Max + 1)) SC : O(1)     ->    TLE

int CountSubarrays(int Sum, vector<int> &boards)
{
    int n = boards.size();
    int Subarrays = 1, CurrentSum = 0;
    for(int i = 0; i < n; i++)
    {
        if(CurrentSum + boards[i] <= Sum)
            CurrentSum += boards[i];
        else   
            CurrentSum = boards[i], Subarrays++;
    }
    return Subarrays;
}
int findLargestMinDistance(vector<int> &boards, int k)
{
    int n = boards.size();
    if(k > n)
        return -1;
    int Max = *max_element(boards.begin(), boards.end());
    int Sum = accumulate(boards.begin(), boards.end(), 0);
    for(int i = Max; i <= Sum; i++)
    {
        if(CountSubarrays(i, boards) <= k)
            return i;
    }
    return Max;
}


2. Binary Search
TC : O(N * Log(Sum - Max + 1)) SC : O(1)

int CountSubarrays(int Sum, vector<int> &boards)
{
    int n = boards.size();
    int Subarrays = 1, CurrentSum = 0;
    for(int i = 0; i < n; i++)
    {
        if(CurrentSum + boards[i] <= Sum)
            CurrentSum += boards[i];
        else   
            CurrentSum = boards[i], Subarrays++;
    }
    return Subarrays;
}
int findLargestMinDistance(vector<int> &boards, int k)
{
    int n = boards.size();
    if(k > n)
        return -1;
    int Low = *max_element(boards.begin(), boards.end());
    int High = accumulate(boards.begin(), boards.end(), 0);
    while(Low <= High)
    {
        int Mid = (Low + High) / 2;
        if(CountSubarrays(Mid, boards) > k)
            Low = Mid + 1;
        else   
            High = Mid - 1;
    }
    return Low;
}