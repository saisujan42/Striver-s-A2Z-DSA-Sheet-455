1. Brute Force Approach (Linear Search)
TC : O(N * M) SC : O(1)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int n = matrix.size();
        int m = matrix[0].size();
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(matrix[i][j] == target)
                    return true;
        return false;    
    }
};


2. Linear Search On Columns & Binary Search On Rows
TC : O(N * LogM) SC : O(1)

class Solution {
public:
    bool searchRow(vector<int> &arr, int target)
    {
        int m = arr.size();
        int Low = 0, High = m - 1;
        while(Low <= High)
        {
            int Mid = (Low + High) / 2;
            if(arr[Mid] == target)
                return true;
            if(arr[Mid] > target)
                High = Mid - 1;
            else
                Low = Mid + 1;
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int n = matrix.size();
        int m = matrix[0].size();
        for(int i = 0; i < n; i++)
        {
            if(target >= matrix[i][0] && target <= matrix[i][m - 1])
                if(searchRow(matrix[i], target))
                    return true;
        }
        return false;
    }
};


3. Binary Search 
TC : O(N + M) SC : O(1)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int n = matrix.size();
        int m = matrix[0].size();
        int Row = 0, Column = m - 1;
        while(Row < n && Column >= 0)
        {
            if(matrix[Row][Column] == target)
                return true;
            if(matrix[Row][Column] < target)
                Row++;
            else
                Column--;
        }
        return false;
    }
};