1. Convert Matrix to 1D Array & Sort
TC : O((R * C) + (R * C)Log(R * C)) SC : O(1)   ->   TLE

class Solution{   
public:
    int median(vector<vector<int>> &matrix, int R, int C)
    {
        vector<int> Answer;
        for(int i = 0; i < R; i++)
            for(int j = 0; j < C; j++)
                Answer.push_back(matrix[i][j]);
        sort(Answer.begin(), Answer.end());
        return Answer[(R * C) / 2];
    }
};



2. Binary Search
TC : O(Log(10^9) * N * LogM) SC : O(1)
TC : O(9Log10 * N * LogM) 

class Solution{   
public:
    int UpperBound(vector<int> &arr, int n, int target)
    {
        int Low = 0, High = n - 1;
        int Answer = n;
        while(Low <= High)
        {
            int Mid = (Low + High) / 2;
            if(arr[Mid] > target)
                Answer = Mid, High = Mid - 1;
            else
                Low = Mid + 1;
        }
        return Answer;
    }
    int CountLessThanEqual(int Mid, vector<vector<int>> &matrix)
    {
        int n = matrix.size();
        int m = matrix[0].size();
        int Count = 0;
        for(int i = 0; i < n; i++)
            Count += UpperBound(matrix[i], m, Mid);
        return Count;
    }
    int median(vector<vector<int>> &matrix, int R, int C)
    {
        int Low = INT_MAX, High = INT_MIN;
        for(int i = 0; i < R; i++)
        {
            Low = min(Low, matrix[i][0]);
            High = max(High, matrix[i][C - 1]);
        }
        
        int Required = (R * C) / 2;
        while(Low <= High)
        {
            int Mid = (Low + High) / 2;
            int Count = CountLessThanEqual(Mid, matrix);
            if(Count <= Required)
                Low = Mid + 1;
            else
                High = Mid - 1;
        }
        return Low;
    }
};