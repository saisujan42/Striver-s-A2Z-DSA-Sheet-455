1. Brute Force Using Iteration
LCM -> TC : O(max(A, B)) SC : O(1)
GCD -> TC : O(min(A, B)) SC : O(1)

class Solution {
  public:
    long long LCM(long long &A, long long &B)
    {
        long long MinVal = min(A, B);
        long long MaxVal = max(A, B);
        for(long long i = MaxVal; i <= A * B; i += MaxVal)
            if(i % MinVal == 0)
                return i;
    }
    long long GCD(long long &A, long long &B)
    {
        for(long long i = min(A, B); i >= 1; i--)
            if(A % i == 0 && B % i == 0)
                return i;
    }
    vector<long long> lcmAndGcd(long long A , long long B) 
    {
        return {LCM(A, B), GCD(A, B)};
    }
};


2. GCD Using Iteration & LCM Using GCD
GCD -> TC : O(min(A, B)) SC : O(1)
LCM -> TC : O(1) SC : O(1)

class Solution {
  public:
    long long LCM(long long &A, long long &B, long long &gcd)
    {
        return (A / gcd) * B;
    }
    long long GCD(long long &A, long long &B)
    {
        for(long long i = min(A, B); i >= 1; i--)
            if(A % i == 0 && B % i == 0)
                return i;
    }
    vector<long long> lcmAndGcd(long long A , long long B) 
    {
        long long gcd = GCD(A, B);
        long long lcm = LCM(A, B, gcd);
        return {lcm, gcd};
    }
};


3. Euclidean Algorithm Using Subtraction
TC : O(Min(A, B)) SC : O(1)

class Solution {
  public:
    long long LCM(long long &A, long long &B, long long &gcd)
    {
        return (A / gcd) * B;
    }
    long long GCD(long long A, long long B)
    {
        while(A > 0 && B > 0)
        {
            if(A > B)
                A = A - B;
            else
                B = B - A;
        }
        if(A == 0)
            return B;
        return A;
    }
    vector<long long> lcmAndGcd(long long A , long long B) 
    {
        long long gcd = GCD(A, B);
        long long lcm = LCM(A, B, gcd);
        return {lcm, gcd};
    }
};


4. Euclidean Algorithm Using Modulo
TC : O(Log(Min(A, B))) SC : O(1)

class Solution {
  public:
    long long LCM(long long &A, long long &B, long long &gcd)
    {
        return (A / gcd) * B;
    }
    long long GCD(long long A, long long B)
    {
        while(A > 0 && B > 0)
        {
            if(A > B)
                A = A % B;
            else
                B = B % A;
        }
        if(A == 0)
            return B;
        return A;
    }
    vector<long long> lcmAndGcd(long long A , long long B) 
    {
        long long gcd = GCD(A, B);
        long long lcm = LCM(A, B, gcd);
        return {lcm, gcd};
    }
};


5. Euclidean Algorithm Using Recursion
TC : O(Log(Min(A, B))) 

class Solution {
  public:
    long long LCM(long long &A, long long &B, long long &gcd)
    {
        return (A / gcd) * B;
    }
    long long GCD(long long A, long long B)
    {
        return B == 0 ? A : GCD(B, A % B);
    }
    vector<long long> lcmAndGcd(long long A , long long B) 
    {
        long long gcd = GCD(A, B);
        long long lcm = LCM(A, B, gcd);
        return {lcm, gcd};
    }
};