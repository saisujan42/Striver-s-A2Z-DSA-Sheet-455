1. Push Elements Into A Vector & Copy Back To List
TC : O(2N) SC : O(N)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) 
    {
        if(head == NULL || head -> next == NULL)
            return head;
        ListNode *temp = head;
        vector<int> Values;
        while(temp != NULL && temp -> next != NULL)
        {
            Values.push_back(temp -> val);
            temp = temp -> next -> next;
        }    
        if(temp != NULL)
            Values.push_back(temp -> val);
        temp = head -> next;
        while(temp != NULL && temp -> next != NULL)
        {
            Values.push_back(temp -> val);
            temp = temp -> next -> next;
        }
        if(temp != NULL)
            Values.push_back(temp -> val);
        temp = head;
        for(int i = 0; i < Values.size(); i++)
        {
            temp -> val = Values[i];
            temp = temp -> next;
        }
        return head;
    }
};



2. Changing Links
TC : O(N) SC : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) 
    {
        if(head == NULL || head -> next == NULL)
            return head;
        ListNode *Odd = head, *Even = head -> next, *EvenHead = head -> next;
        while(Even != NULL && Even -> next != NULL)
        {
            Odd -> next = Odd -> next -> next;
            Even -> next = Even -> next -> next;

            Odd = Odd -> next;
            Even = Even -> next;
        }
        Odd -> next = EvenHead;
        return head;
    }
};