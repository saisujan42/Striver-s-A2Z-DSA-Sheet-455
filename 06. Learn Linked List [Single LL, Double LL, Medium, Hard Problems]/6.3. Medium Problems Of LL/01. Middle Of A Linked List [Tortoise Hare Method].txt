1. Counting Number of Nodes 
TC : O(N + N/2) SC : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) 
    {
        if(head == NULL || head -> next == NULL)
            return head;
        int Count = 0;
        ListNode * temp = head;
        while(temp != NULL)
        {
            Count++;
            temp = temp -> next;
        }    
        temp = head;
        int Count2 = 0;
        for(int i = 1; i < Count / 2 + 1; i++)
            temp = temp -> next;
        return temp;
    }
};



2. Fast & Slow Pointer Method 
TC : O(N/2) SC : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) 
    {
        ListNode * Slow = head, * Fast = head;
        while(Fast != NULL && Fast -> next != NULL)
        {
            Slow = Slow -> next;
            Fast = Fast -> next -> next;
        }
        return Slow;
    }
};