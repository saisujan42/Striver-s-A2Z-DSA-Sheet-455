1. Using Map 
TC : O(N) SC : O(N)

/*

struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

//Function to find the length of a loop in the linked list.
int countNodesinLoop(struct Node *head)
{
    int Count = 0;
    unordered_map<struct Node*, int> Map;
    while(head != NULL)
    {
        if(Map.find(head) == Map.end())
            Map[head] = ++Count;
        else
            return Count - Map[head] + 1;
        head = head -> next;
    }
    return 0;
}



2. Tortoise & Hare Method 
TC : O(N) SC : O(1)

/*

struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
int LoopCount(struct Node* slow, struct Node* fast)
{
    int Count = 1;
    fast = fast -> next;
    while(slow != fast)
    {
        Count++;
        fast = fast -> next;
    }
    return Count;
}

int countNodesinLoop(struct Node *head)
{
    if(head == NULL || head -> next == NULL)
        return 0;
    struct Node* slow = head, *fast = head;
    while(fast != NULL && fast -> next != NULL)
    {
        slow = slow -> next;
        fast = fast -> next -> next;
        if(slow == fast)
            return LoopCount(slow, fast);
    }
    return 0;
}