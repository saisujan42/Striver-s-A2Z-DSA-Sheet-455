1. Counting Nodes 
TC : O(N + N/2) SC : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) 
    {
        if(head == NULL || head -> next == NULL)
            return NULL;
        int Count = 0;
        ListNode *temp = head, *prev = NULL;
        while(temp != NULL)
        {
            Count++;
            temp = temp -> next;
        }
        temp = head;
        for(int i = 0; i < Count/2; i++)
        {
            prev = temp;
            temp = temp -> next;
        }
        prev -> next = temp -> next;
        delete(temp);
        return head;
    }
};


2. Slow & Fast Pointers
TC : O(N/2) SC : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) 
    {
        if(head == NULL || head -> next == NULL)
            return NULL;
        ListNode *Prev = NULL, *Slow = head, *Fast = head;
        while(Fast != NULL && Fast -> next != NULL)
        {
            Prev = Slow;
            Slow = Slow -> next;
            Fast = Fast -> next -> next;
        }    
        Prev -> next = Slow -> next;
        delete(Slow);
        return head;
    }
};