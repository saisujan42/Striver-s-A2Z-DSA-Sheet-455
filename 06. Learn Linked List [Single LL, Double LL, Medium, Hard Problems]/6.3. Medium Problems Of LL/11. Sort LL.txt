1. Copy To Vector & Sort
TC : O(2N + NLogN) SC : O(N)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) 
    {
        vector<int> Vector;
        ListNode *temp = head;
        while(temp != NULL)
        {
            Vector.push_back(temp -> val);
            temp = temp -> next;
        }
        sort(Vector.begin(), Vector.end());
        temp = head;
        for(int i = 0; i < Vector.size(); i++)
        {
            temp -> val = Vector[i];
            temp = temp -> next;
        }
        return head;
    }
};



2. Using Merge Sort 
TC : O(NLogN) SC : O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *FindMiddle(ListNode *head)
    {
        ListNode *Slow = head, *Fast = head -> next;
        while(Fast != NULL && Fast -> next != NULL)
        {
            Slow = Slow -> next;
            Fast = Fast -> next -> next;
        }
        return Slow;
    }
    ListNode *Merge(ListNode *LeftHead, ListNode *RightHead)
    {
        ListNode *Head = new ListNode(-1);
        ListNode *Temp = Head;
        while(LeftHead != NULL && RightHead != NULL)
        {
            if(LeftHead -> val < RightHead -> val)
            {
                Temp -> next = LeftHead;
                Temp = LeftHead;
                LeftHead = LeftHead -> next;
            }
            else
            {
                Temp -> next = RightHead;
                Temp = RightHead;
                RightHead = RightHead -> next;
            }
        }
        if(LeftHead)
            Temp -> next = LeftHead;
        else
            Temp -> next = RightHead;
        return Head -> next;
    }
    ListNode *sortList(ListNode* head) 
    {
        if(head == NULL || head -> next == NULL)
            return head;

        ListNode *Middle = FindMiddle(head);
        ListNode *LeftHead = head, *RightHead = Middle -> next;
        Middle -> next = NULL;

        LeftHead = sortList(LeftHead);
        RightHead = sortList(RightHead);
        return Merge(LeftHead, RightHead);
    }
};