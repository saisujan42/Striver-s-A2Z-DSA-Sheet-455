1. Delete Occurrences Of A Key
TC : O(N) SC : O(1)

/* a Node of the doubly linked list 
struct Node
{
  int data;
  struct Node *next;
  struct Node *prev;
  Node(int x) { data = x; next = prev = NULL; }
}; */

class Solution {
  public:
    struct Node *Delete(struct Node *temp)
    {
        if(temp -> prev == NULL)
        {
            struct Node *nextNode = temp -> next;
            if(nextNode)
                nextNode -> prev = NULL;
            delete(temp);
            return nextNode;
        }
        if(temp -> next == NULL)
        {
            temp -> prev -> next = NULL;
            delete(temp);
            return NULL;
        }
        struct Node *nextNode = temp -> next;
        temp -> prev -> next = temp -> next;
        temp -> next -> prev = temp -> prev;
        delete(temp);
        return nextNode;
    }    
    void deleteAllOccurOfX(struct Node** head, int x) 
    {
        struct Node *temp = *head;
        while(temp != NULL)
        {
            if(temp -> data == x)
            {
                if(temp == *head)
                    *head = (*head) -> next;
                temp = Delete(temp);
            }
            else
                temp = temp -> next;
        }
    }
};


2. Shorter Code (Striver's)
TC : O(N) SC : O(1)

/* a Node of the doubly linked list 
struct Node
{
  int data;
  struct Node *next;
  struct Node *prev;
  Node(int x) { data = x; next = prev = NULL; }
}; */

class Solution {
  public:
    void deleteAllOccurOfX(struct Node** head, int x) 
    {
        struct Node *temp = *head;
        while(temp != NULL)
        {
            if(temp -> data == x)
            {
                if(temp == *head)
                    *head = temp -> next;
                
                struct Node *nextNode = temp -> next;
                struct Node *prevNode = temp -> prev;
                if(nextNode != NULL)
                    nextNode -> prev = prevNode;
                if(prevNode != NULL)
                    prevNode -> next = nextNode;
                
                free(temp);
                temp = nextNode;
            }
            else
                temp = temp -> next;
        }
    }
};