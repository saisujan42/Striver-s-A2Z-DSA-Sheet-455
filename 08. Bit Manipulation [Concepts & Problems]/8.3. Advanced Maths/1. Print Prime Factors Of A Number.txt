1. Checking All Divisors From 1 To N 
TC : O(N * Sqrt(N)) SC : O(1) (Not Considering Answer as Extra Space)

class Solution{
	public:
	bool isPrime(int n)
	{
	    for(int i = 2; i <= sqrt(n); i++)
	        if(n % i == 0)
	            return false;
	   return true;
	}
	vector<int>AllPrimeFactors(int N) 
	{
	    vector<int> Answer;
	    for(int i = 2; i <= N; i++)
	    {
	        if(N % i == 0 && isPrime(i))
	            Answer.push_back(i);
	    }
	    return Answer;
	}
};


2. Optimised Approach for Checking All Divisors From 1 to Sqrt(N)
TC : O(Sqrt(N) * 2 * Sqrt(N)) SC : O(1) (Not Considering Answer)

class Solution{
	public:
	bool isPrime(int n)
	{
	    if(n == 1) return false;
	    for(int i = 2; i <= sqrt(n); i++)
	        if(n % i == 0)
	            return false;
	   return true;
	}
	vector<int>AllPrimeFactors(int N) 
	{
	    vector<int> Answer;
	    for(int i = 1; i <= sqrt(N); i++)
	    {
	        if(N % i == 0)
	        {
	            if(isPrime(i))
	                Answer.push_back(i);
	            if((N / i) != i && isPrime(N / i))
	                Answer.push_back(N / i);
	        }
	    }
	    sort(Answer.begin(), Answer.end());
	    return Answer;
	}
};



3. Using Maths (Finding Factors By Dividing)
TC : O(N) SC : O(1)

class Solution{
	public:
	vector<int>AllPrimeFactors(int N)                   2   | 780
	{                                                   2   | 390
	    vector<int> Answer;                             3   | 195
	    for(int i = 2; i <= N; i++)                     5   | 65
	    {                                               13  | 13
	        if(N % i == 0)                                  | 1
	        {
	            Answer.push_back(i);
	            while(N % i == 0)
	                N /= i;
	        }
	    }
	    return Answer;
	}
};


4. Optimised Approach Using Maths
TC : O(Sqrt(N)) SC : O(1)


class Solution{
	public:
	vector<int>AllPrimeFactors(int N) 
	{
	    vector<int> Answer;
	    for(int i = 2; i <= sqrt(N); i++)
	    {
	        if(N % i == 0)
	        {
	            Answer.push_back(i);
	            while(N % i == 0)
	                N /= i;
	        }
	    }
	    if(N != 1)
	        Answer.push_back(N);
	    return Answer;
	}
};


