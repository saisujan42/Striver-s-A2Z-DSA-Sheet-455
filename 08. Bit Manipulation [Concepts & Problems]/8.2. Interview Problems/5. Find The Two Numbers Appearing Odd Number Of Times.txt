1. Brute Force Approach
TC : O(N^2) SC : O(1)  ->   TLE

class Solution{
    public:
    vector<long long int> twoOddNum(long long int Arr[], long long int N)  
    {
        long long int A = -1, B = -1;
        for(int i = 0; i < N; i++)
        {
            int Count = 0;
            for(int j = 0; j < N; j++)
            {
                if(Arr[i] == Arr[j])
                    Count++;
            }
            if(Count % 2 == 1 && A == -1)
                A = Arr[i];
            else if(Count % 2 == 1 && A != -1 && A != Arr[i])
            {
                B = Arr[i];
                break;
            }
        }
        return {max(A, B), min(A, B)};
    }
};


2. Using Map

TC : O(N + M) SC : O(M)      ->        TLE
M = Number of Elements Inserted Into Map

class Solution{
    public:
    vector<long long int> twoOddNum(long long int Arr[], long long int N)  
    {
        unordered_map<long long, long long> Map;
        long long int A = -1, B = -1;
        for(int i = 0; i < N; i++)
            Map[Arr[i]]++;
        for(auto ch : Map)
        {
            if(ch.second % 2 == 1)
            {
                if(A == -1) A = ch.first;
                else B = ch.first;
            }
        }
        return {max(A, B), min(A, B)};
    }
};


3. Using Xor & 2-Buckets
TC : O(2N) SC : O(1)

class Solution{
    public:
    vector<long long int> twoOddNum(long long int Arr[], long long int N)  
    {
        long long int A = 0, B = 0, Xor = 0;
        for(int i = 0; i < N; i++)
            Xor ^= Arr[i];
        
        long long int RightMostSetBit = (Xor & (Xor - 1)) ^ Xor;
        for(int i = 0; i < N; i++)
        {
            if(Arr[i] & RightMostSetBit)
                A ^= Arr[i];
            else
                B ^= Arr[i];
        }
        return {max(A, B), min(A, B)};
    }
};