1. Brute Force Approach
TC : O(N^2) SC : O(1)

class Solution {
public:
    int singleNumber(vector<int>& nums) 
    {
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            int Count = 0;
            for(int j = 0; j < n; j++)
                if(nums[i] == nums[j])
                    Count++;
            if(Count == 1)
                return nums[i];
        }    
        return -1;
    }
};


2. Sorting And Iteration
TC : O(NLogN + N) SC : O(1)

class Solution {
public:
    int singleNumber(vector<int>& nums) 
    {
        int n = nums.size();
        if(n == 1)
            return nums[0];
        sort(nums.begin(),nums.end());
        for(int i = 0; i < n; i++)
        {
            if(nums[i] == nums[i+1])
                i++;
	    else
                return nums[i];
        }
        return 0;
    }
};


3. Using Map

TC : O(N + M) SC : O(M)
M = (N/2 + 1) as Every Element Appears Twice Except One Element

class Solution {
public:
    int singleNumber(vector<int>& nums) 
    {
        map<int, int> Map;
        for(auto Val : nums)
            Map[Val]++;
        for(auto Val : Map)
            if(Val.second == 1)
                return Val.first;
        return -1;    
    }
};


4. Using Xor
TC : O(N) SC : O(1)

class Solution {
public:
    int singleNumber(vector<int>& nums) 
    {
        int Xor = 0;
        for(auto Val : nums)
            Xor ^= Val;
        return Xor;
    }
};