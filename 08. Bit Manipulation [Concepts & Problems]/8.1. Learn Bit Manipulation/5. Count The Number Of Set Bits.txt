1. Using BuiltIn PopCount To Count No.Of Set Bits
TC : O(N * Log(i)) SC : O(1)           ->        TLE

class Solution{
    public:
    int countSetBits(int n)
    {
        int Count = 0;
        for(int i = 1; i <= n; i++)
            Count += __builtin_popcount(i);
        return Count;
    }
};


2. Using % and / To Count Set Bits
TC : O(N * Log(i)) SC : O(1)        ->    TLE

class Solution{
    public:
    int countSetBits(int n)
    {
        int Count = 0;
        for(int i = 1; i <= n; i++)
        {
            int Temp = i;
            while(Temp)
            {
                if(Temp % 2 == 1)
                    Count++;
                Temp /= 2;
            }
        }
        return Count;
    }
};


3. Using & and >> To Count Set Bits
TC : O(N * Log(i)) SC : O(1)      ->    TLE

class Solution{
    public:
    int countSetBits(int n)
    {
        int Count = 0;
        for(int i = 1; i <= n; i++)
        {
            int Temp = i;
            while(Temp)
            {
                if(Temp & 1)                 //
                    Count++;                 // Count += (Temp & 1);
                Temp = Temp >> 1;
            }
        }
        return Count;
    }
};


4. Using n & (n - 1)

TC : O(N * No.Of Set Bits(i)) SC : O(1)   ->  TLE
Max No. Of Set Bits = 31
TC : O(N * 31) SC : O(1)

class Solution{
    public:
    int countSetBits(int n)
    {
        int Count = 0;
        for(int i = 1; i <= n; i++)
        {
            int Temp = i;
            while(Temp)
            {
                Count++;
                Temp = Temp & (Temp - 1);
            }
        }
        return Count;
    }
};