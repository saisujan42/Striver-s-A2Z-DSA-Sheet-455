Where, k = k << i;          ->    k = k << (i - 1)
(i is 0-based Index)              (i is 1-based Index)

1. (num >> i) & i             -> To Find ith Bit
2. num & (1 << i)             -> To Find ith Bit
3. (num | k)                  -> To Set ith Bit
4. (num & (~k))               -> To Clear ith Bit
5. (num ^ k)                  -> To Toggle ith Bit
6. (num & (num - 1))          -> To Clear Rightmost Set Bit
7. (num | (num + 1))          -> To Set The Rightmost Unset Bit
8. if(num & (num - 1) == 0)   -> Num is a Power Of 2 
9. if(num & (num + 1) == 0)   -> Num has all bits Set


To Find Xor From 1 To N

if(N % 4 == 1) return 1;
if(N % 4 == 2) return N + 1;
if(N % 4 == 3) return 0;
if(N % 4 == 0) return N;

To Find Xor From L to R:
FindXor(L - 1) ^ FindXor(R)      // Above is the FindXor Function