1. Convert To Strings & Compare Bits

TC : O(Log(N1) + (LogN2) + Log(N)) SC : O(1)
Log(N1) & Log(N2) - To Convert Int To String
Log(N) to Traverse Length Of String, where N = Length Of String

class Solution {
public:
    string AddZeroes(string str, int n)
    {
        while(n--)
            str += '0';
        return str;
    }
    int minBitFlips(int start, int goal) 
    {
        string FirstStr, SecondStr;
        while(start)
        {
            if(start % 2 == 0)
                FirstStr += '0';
            else
                FirstStr += '1';
            start /= 2;
        }
        while(goal)
        {
            if(goal % 2 == 0)
                SecondStr += '0';
            else
                SecondStr += '1';
            goal /= 2;
        }
        int n1 = FirstStr.size();
        int n2 = SecondStr.size();

        if(n2 > n1) 
            FirstStr = AddZeroes(FirstStr, n2 - n1);
        else
            SecondStr = AddZeroes(SecondStr, n1 - n2);
        
        int n = FirstStr.size();
        int Count = 0;
        for(int i = 0; i < n; i++)
        {
            if(FirstStr[i] != SecondStr[i])
                Count++;
        }
        return Count;
    }
};


2. Comparing Each Bit Of 2 Start & Goal Using AND Operator
TC : O(Max(Log(N1), Log(N2)) SC : O(1)

class Solution {
public:
    int minBitFlips(int start, int goal) 
    {
        int Count = 0;
        while(start && goal)
        {
            if((start & 1) != (goal & 1))
                Count++;
            start >>= 1;
            goal >>= 1;
        }
        while(start)
        {
            if(start & 1) Count++;
            start >>= 1;
        }
        while(goal)
        {
            if(goal & 1) Count++;
            goal >>= 1;
        }
        return Count;
    }
};


3. Doing Xor & Counting Set Bits Of Resultant

TC : O(LogN) SC : O(1)
Where, N = start ^ goal

3A)
class Solution {
public:
    int minBitFlips(int start, int goal) 
    {
        int Count = 0;
        int Answer = start ^ goal;
        for(int i = 0; i < 31 && Answer > 0; i++)
        {
            if(Answer & (1 << i))
                Count++;
        }
        return Count;
    }
};


3B)
class Solution {
public:
    int minBitFlips(int start, int goal) 
    {
        int Count = 0;
        int Answer = start ^ goal;
        while(Answer)
        {
            Count += Answer & 1;
            Answer >>= 1;
        }
        return Count;
    }
};