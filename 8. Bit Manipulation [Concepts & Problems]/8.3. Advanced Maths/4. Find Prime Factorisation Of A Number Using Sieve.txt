1. Using Math (Dividing By Prime Factors)
TC : O(Sqrt(N)) SC : O(1)

class Solution 
{
    public:
    //void sieve() {}
    vector<int> findPrimeFactors(int N) 
    {
        vector<int> Answer;
        for(int i = 2; i * i <= N; i++)
        {
            while(N % i == 0)
            {
                Answer.push_back(i);
                N /= i;
            }
        }
        if(N != 1)
            Answer.push_back(N);
        return Answer;
    }
};


2. Sieve Of Eratosthenes

TC : O(N Log(LogN)) SC : O(N)
This Approach is Suitable for Solving Multiple Queries

class Solution {
    public:
    void sieve() {}
    vector<int> SieveEras(int N)
    {
        vector<int> Sieve(N + 1);
        for(int i = 2; i <= N; i++)
            Sieve[i] = i;
            
        for(int i = 2; i * i <= N; i++)
        {
            if(Sieve[i] == i)
            {
                for(int j = i * i; j <= N; j += i)
                {
                    if(Sieve[j] == j)
                        Sieve[j] = i;
                }
            }
        }
        return Sieve;
    }
    vector<int> findPrimeFactors(int N) 
    {
        vector<int> Sieve = SieveEras(N);
        vector<int> Answer;
        while(N > 1)
        {
            Answer.push_back(Sieve[N]);
            N /= Sieve[N];
        }
        return Answer;
    }
};