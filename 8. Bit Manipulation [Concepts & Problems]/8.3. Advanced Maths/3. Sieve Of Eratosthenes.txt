1. Check From Primes From 1 To N
TC : O(N * Sqrt(N)) SC : O(1)

class Solution {
public:
    bool isPrime(int n)
    {
        for(int i = 2; i * i <= n; i++)
            if(n % i == 0)
                return false;
        return true;
    }
    int countPrimes(int n) 
    {
        if(n <= 2) return 0;
        int Count = 0;
        for(int i = 3; i < n; i++)         // i += 2 (Optimisation Step)
            if(isPrime(i))
                Count++;
        return Count;
    }
};


2. Sieve Of Eratosthenes

class Solution {
public:
    int countPrimes(int n) 
    {
        if(n <= 2) return 0;
        
        int Count = 0;
        bool isPrime[n];
        for(int i = 2; i < n; i++)
            isPrime[i] = true;
        
        for(int i = 2; i < n; i++)
        {
            for(int j = i * 2; j < n; j += i)
                isPrime[j] = false;
        }    
        for(int i = 2; i < n; i++)
            if(isPrime[i])
                Count++;
        return Count;
    }
};

3. Optimised Sieve Of Eratosthenes
TC : O(2N + NLog(LogN)) SC : O(N) 

class Solution {
public:
    int countPrimes(int n) 
    {
        if(n <= 2) return 0;
        
        int Count = 0;
        bool isPrime[n];
        for(int i = 2; i < n; i++)
            isPrime[i] = true;
        
        for(int i = 2; i * i < n; i++)
        {
            for(int j = i * i; j < n; j += i)
                isPrime[j] = false;
        }    
        for(int i = 2; i < n; i++)
            if(isPrime[i])
                Count++;
        return Count;
    }
};