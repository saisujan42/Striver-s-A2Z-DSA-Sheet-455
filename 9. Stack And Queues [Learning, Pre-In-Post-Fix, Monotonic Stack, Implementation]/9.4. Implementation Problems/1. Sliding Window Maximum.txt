1. Brute Force Approach
TC : O((N - K) * K)) 
SC : O(N - K)        -> (N- K is the Space to Store Answer)  -> TLE

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) 
    {
        int n = nums.size();
        vector<int> Answer;
        for(int i = 0; i <= n - k; i++)
        {
            int Maximum = INT_MIN;
            for(int j = 0; j < k; j++)
                Maximum = max(Maximum, nums[i + j]);
            Answer.push_back(Maximum);
        }
        return Answer;
    }
};



2. Usign 2-Pointer Technique 
   (Iterating Through K-Size Window, Only If Max Element moves out of Window, or New Max Enter the Window)
TC : O((N - K) * K) SC : O(N - K) -> TLE

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) 
    {
        int n = nums.size();
        int Maximum = INT_MIN;
        int Start = 0, End = k - 1;
        vector<int> Answer;
        
        for(int i = Start; i <= End; i++)
            Maximum = max(nums[i], Maximum);
        Answer.push_back(Maximum);
        while(End < n-1)
        {
            if(nums[Start] == Maximum || nums[End + 1] > Maximum)
            {
                Start++, End++;
                Maximum = INT_MIN;
                for(int i = Start; i <= End; i++)
                    Maximum = max(nums[i], Maximum);
            }
            else 
                Start++, End++;
            Answer.push_back(Maximum);
        }
        return Answer;
    }
};



3. Using Deque
TC : O(2N) SC : O(K) (As Deque Stores A Max of K Elements at Any Given Point)

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) 
    {
        int n = nums.size();
        deque<int> DQ;
        vector<int> Answer;
        for(int i = 0; i < n; i++)
        {
            if(!DQ.empty() && DQ.front() <= i - k)
                DQ.pop_front();
            while(!DQ.empty() && nums[DQ.back()] <= nums[i])
                DQ.pop_back();
            DQ.push_back(i);
            if(i >= k - 1)
                Answer.push_back(nums[DQ.front()]);
        }
        return Answer;
    }
};