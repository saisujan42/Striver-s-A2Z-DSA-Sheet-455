1. Brute Force Approach
   Check Column for (N - 1) 1's and Then Check Column For Zero 0's

TC : O(N * (N + N)) SC : O(1)
TC : O(2N^2)

class Solution {
    public:
    int celebrity(vector<vector<int>>& mat) 
    {
        int n = mat.size();
        for(int j = 0; j < n; j++)
        {
            int OneCount = 0, ZeroIndex = -1;
            for(int i = 0; i < n; i++)
            {
                if(mat[i][j])
                    OneCount++;
                else
                    ZeroIndex = i;
            }
            if(OneCount == n - 1)
            {
                int Count = 0;
                for(int i = 0; i < n; i++)
                    if(mat[ZeroIndex][i] == 0)
                        Count++;
                if(Count == n)
                    return ZeroIndex;
            }
        }
        return -1;
    }
};


2. Optimized Brute Force Approach
   Using 2 Vectors To Store KnowMe & IKnow Count for an Index

TC : O(N^2 + N) SC : O(2N)

class Solution {
    public:
    int celebrity(vector<vector<int>>& mat) 
    {
        int n = mat.size();
        vector<int> KnowMe(n, 0), IKnow(n, 0);
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(mat[i][j])
                    KnowMe[j]++, IKnow[i]++;
            }
        }
        for(int i = 0; i < n; i++)
            if(KnowMe[i] == n - 1 && IKnow[i] == 0)
                return i;
        return -1;
    }
};



3. Using Top & Down Pointers
TC : O(2N) SC : O(1)

class Solution {
    public:
    int celebrity(vector<vector<int>>& mat) 
    {
        int n = mat.size();
        int Top = 0, Bottom = n - 1;
        while(Top < Bottom)
        {
            if(mat[Top][Bottom])
                Top++;
            else if(mat[Bottom][Top]) 
                Bottom--;
            else Top++, Bottom--;
        }
        if(Top > Bottom) return -1;
        
        //Top == Bottom
        for(int i = 0; i < n; i++)
        {
            if(i == Top) continue;
            if(mat[Top][i] == 0 && mat[i][Top] == 1)
                continue;
            else return -1;
        }
        return Top;
    }
};