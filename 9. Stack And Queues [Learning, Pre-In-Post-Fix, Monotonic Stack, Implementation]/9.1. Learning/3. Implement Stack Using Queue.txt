1. Using 2 Queues
TC : O(N) - Push, O(1) - Pop, Top, Empty
SC : O(2N) 

class MyStack {
public:
    queue<int> Q1, Q2;    
    MyStack() {}
    
    void push(int x) 
    {
        Q2.push(x);
        while(!Q1.empty())
        {
            Q2.push(Q1.front());
            Q1.pop();
        }    
        queue<int> temp = Q1;
        Q1 = Q2;
        Q2 = temp;
    }
    
    int pop() 
    {
        int Element = Q1.front();
        Q1.pop();
        return Element;  
    }
    
    int top() 
    {
        return Q1.front();    
    }
    
    bool empty() 
    {
        return Q1.empty();    
    }
};


2. Using 1 Queue
TC : O(N) - Push, O(1) - Pop, Top, Empty
SC : O(N)


class MyStack {
public:
    queue<int> Queue;    
    MyStack() {}
    
    void push(int x) 
    {
        int n = Queue.size();
        Queue.push(x);
        for(int i = 0; i < n; i++)
        {
            Queue.push(Queue.front());
            Queue.pop();
        }    
    }
    
    int pop() 
    {
        int Element = Queue.front();
        Queue.pop();
        return Element;  
    }
    
    int top() 
    {
        return Queue.front();    
    }
    
    bool empty() 
    {
        return Queue.empty();    
    }
};