1. Brute Force Approach
TC : O(N1 * N2) SC : O(1) (Not Considering Answer as Extra Space)

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) 
    {
        int n1 = nums1.size();
        int n2 = nums2.size();
        vector<int> Answer;
        for(int i = 0; i < n1; i++)
        {
            int j = 0, Value = -1;
            while(j < n2 && nums1[i] != nums2[j])
                j++;
            for(int k = j + 1; k < n2; k++)
            {
                if(nums2[k] > nums2[j])
                {
                    Value = nums2[k];
                    break;
                }
            }
            Answer.push_back(Value);
        }    
        return Answer;
    }
};


2. Brute Force Approach (Using Map)
TC : O(N1 * N2) SC : O(N1) (For Using Map)

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) 
    {
        int n1 = nums1.size();
        int n2 = nums2.size();
        vector<int> Answer(n1, -1);
        unordered_map<int, int> Map;
        for(int i = 0; i < n1; i++)
            Map[nums1[i]] = i;
        for(int i = 0; i < n2; i++)
        {
            if(Map.find(nums2[i]) == Map.end())
                continue;
            for(int j = i + 1; j < n2; j++)
            {
                if(nums2[j] > nums2[i])
                {
                    int Index = Map[nums2[i]];
                    Answer[Index] = nums2[j];
                    break;
                }
            }
        }    
        return Answer;
    }
};



3. Using Monotonic Stack & Map
TC : O(N1 + N2) SC : O(N1 + N2)

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) 
    {
        int n1 = nums1.size();
        int n2 = nums2.size();
        vector<int> Answer(n1);
        unordered_map<int, int> Map;
        stack<int> Stack;

        for(int i = 0; i < n1; i++)
            Map[nums1[i]] = i;
        
        for(int i = n2 - 1; i >= 0; i--)
        {
            if(Map.find(nums2[i]) != Map.end())
            {
                int Index = Map[nums2[i]];
                while(!Stack.empty() && Stack.top() <= nums2[i])
                    Stack.pop();
                if(Stack.empty())
                    Answer[Index] = -1;
                else
                    Answer[Index] = Stack.top();
            }
            Stack.push(nums2[i]);
        }
        return Answer;
    }
};