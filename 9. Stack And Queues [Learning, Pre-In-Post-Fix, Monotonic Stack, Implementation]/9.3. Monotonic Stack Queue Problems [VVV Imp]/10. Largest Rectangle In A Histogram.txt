1. Brute Force Approach
TC : O(N^2) SC : O(1)

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) 
    {
        int n = heights.size();
        int MaxRectangle = INT_MIN;
        for(int i = 0; i < n; i++)    
        {
            int MaxCount = 0, Count = 0;
            for(int j = i; j < n; j++)
            {
                if(heights[j] >= heights[i])
                    Count++;
                else 
                    Count = 0;
                MaxCount = max(Count, MaxCount);
            }
            MaxRectangle = max(MaxRectangle, MaxCount * heights[i]);
        }
        return MaxRectangle;
    }
};



2. Using Next Smaller Element & Previous Smaller Element
TC : O(N + 2N + 2N) SC : O(2N + 2N)

class Solution {
public:
    vector<int> FindPSEIndex(vector<int> &arr)
    {
        int n = arr.size();
        vector<int> PSE(n);
        stack<int> Stack;
        for(int i = 0; i < n; i++)
        {
            while(!Stack.empty() && arr[Stack.top()] >= arr[i])
                Stack.pop();
            PSE[i] = Stack.empty() ? -1 : Stack.top();
            Stack.push(i);
        }
        return PSE;
    }
    vector<int> FindNSEIndex(vector<int> &arr)
    {
        int n = arr.size();
        vector<int> NSE(n);
        stack<int> Stack;
        for(int i = n - 1; i >= 0; i--)
        {
            while(!Stack.empty() && arr[Stack.top()] >= arr[i])
                Stack.pop();
            NSE[i] = Stack.empty() ? n : Stack.top();
            Stack.push(i);
        }
        return NSE;
    }
    int largestRectangleArea(vector<int>& heights) 
    {
        int n = heights.size();
        int MaxArea = INT_MIN;
        vector<int> NSE = FindNSEIndex(heights);
        vector<int> PSE = FindPSEIndex(heights);
        for(int i = 0; i < n; i++)
        {
            int Area = (NSE[i] - PSE[i] - 1) * heights[i];
            MaxArea = max(Area, MaxArea);
        }
        return MaxArea;
    }
};



3. Calculating NSE & PSE in a Single Pass Using Stack
TC : O(2N) SC : O(N)

class Solution {
public:
    int largestRectangleArea(vector<int>& arr) 
    {
        int n = arr.size();
        int MaxArea = INT_MIN;
        stack<int> Stack;
        for(int i = 0; i < n; i++)
        {
            while(!Stack.empty() && arr[Stack.top()] >= arr[i])
            {
                int Element = arr[Stack.top()];
                Stack.pop();
                int NSE = i;
                int PSE = Stack.empty() ? -1 : Stack.top();
                int Area = Element * (NSE - PSE - 1);
                MaxArea = max(Area, MaxArea);
            }
            Stack.push(i);
        }
        while(!Stack.empty())
        {
            int Element = arr[Stack.top()];
            Stack.pop();
            int NSE = n;
            int PSE = Stack.empty() ? -1 : Stack.top();
            int Area = Element * (NSE - PSE - 1);
            MaxArea = max(Area, MaxArea);
        }
        return MaxArea;
    }
};