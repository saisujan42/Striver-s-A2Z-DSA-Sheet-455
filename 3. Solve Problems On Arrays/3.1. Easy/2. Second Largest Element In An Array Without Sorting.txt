1. Using Sorting
TC : O(NLogN) SC : O(1)

class Solution {
  public:
    int print2largest(vector<int> &arr) 
    {
        sort(arr.begin(), arr.end(), greater<int>());
        int n = arr.size(), i = 0;
        while(i < n - 1 && arr[i] == arr[i + 1])
            i++;
        return arr[i + 1];
    }
};


2. Using Set (For Duplicate Elements)
TC : O(N) SC : O(N)

class Solution {
  public:
    int print2largest(vector<int> &arr) 
    {
        int n = arr.size();
        set<int, greater<int>> Set;
        for(int i = 0; i < n; i++)
            Set.insert(arr[i]);
        auto it = Set.begin();
        it++;
        return *it;
    }
};

3. Two-Pass Iteration Method
TC : O(2N) SC : O(1)

class Solution {
  public:
    int print2largest(vector<int> &arr) 
    {
        int n = arr.size();
        int MaxVal = INT_MIN, SecondMax = -1;
        for(int i = 0; i < n; i++)
            MaxVal = max(arr[i], MaxVal);
        for(int i = 0; i < n; i++)
            if(arr[i] > SecondMax && arr[i] < MaxVal)
                SecondMax = arr[i];
        return SecondMax;
    }
};


4. Iterating & Storing Values 
TC : O(N) SC : O(1)

class Solution {
  public:
    int print2largest(vector<int> &arr) 
    {
        int n = arr.size();
        int MaxVal = -1, SecondMax = -1;
        for(int i = 0; i < n; i++)
        {
            if(arr[i] > MaxVal)
            {
                SecondMax = MaxVal;
                MaxVal = arr[i];
            }
            else if(arr[i] > SecondMax && arr[i] < MaxVal)
                SecondMax = arr[i];
        }
        return SecondMax;
    }
};