1. Brute Force Approach
TC : O(N^2) SC : O(1)   ->    TLE

class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        int n = prices.size();
        int MaxProfit = 0;
        for(int i = 0; i < n - 1; i++)
        {
            for(int j = i + 1; j < n; j++)
                MaxProfit = max(MaxProfit, prices[j] - prices[i]);
        }    
        return MaxProfit;
    }
};


2. Using DP Array
TC : O(N) SC : O(N)

class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        int n = prices.size();
        vector<int> Minimum(n);
        Minimum[0] = prices[0];
        int Answer = 0;
        for(int i = 1; i < n; i++)  
        {
            Minimum[i] = min(prices[i], Minimum[i - 1]);
            int Value = prices[i] - Minimum[i - 1];
            if(Value > 0)
                Answer = max(Answer, Value);
        }  
        return Answer;
    }
};


3. Using DP Without Array
TC : O(N) SC : O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        int n = prices.size();
        int Minimum = prices[0];
        int Answer = 0;
        for(int i = 1; i < n; i++)  
        {
            int Value = prices[i] - Minimum;
            Minimum = min(prices[i], Minimum);
            if(Value > 0)
                Answer = max(Answer, Value);
        }  
        return Answer;
    }
};