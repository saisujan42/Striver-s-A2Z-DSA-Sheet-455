1. Brute Force 
TC : O(N^2) SC : O(1)   ->   TLE

class Solution 
{
    public:
    int maxSubArray(vector<int>& nums) 
    {
        int n = nums.size();
        int Sum = INT_MIN;
        for(int i = 0; i < n; i++)
        {
            int CurrentSum = 0;
            for(int j = i; j < n; j++)
            {
                CurrentSum += nums[j];
                Sum = max(Sum, CurrentSum);
            }
        } 
        return Sum;
    }
};


2. Kadane's Algorithm 
TC : O(N) SC : O(1)

Kadane's Algorithm From N to 1
class Solution 
{
    public:
    int maxSubArray(vector<int>& nums) 
    {
        int n = nums.size();
        int CurrSum = 0, MaxSum = INT_MIN;
        for(int i = n - 1; i >= 0; i--)
        {
            CurrSum = max(CurrSum + nums[i], nums[i]);
            MaxSum = max(MaxSum, CurrSum);
        }
        return MaxSum;
    }
};


Kadane's Algorithm From 1 TO N
class Solution {
public:
    int maxSubArray(vector<int>& nums) 
    {
        int n = nums.size();
        int CurrentSum = 0, MaxSum = INT_MIN;
        for(int i = 0; i < n; i++)
        {
            CurrentSum += nums[i];
            MaxSum = max(MaxSum, CurrentSum);
            if(CurrentSum < 0)
                CurrentSum = 0;
        }    
        return MaxSum;
    }
};