1. Brute Force 
TC : O(N^2) SC : O(1)

class Solution 
{
    public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        int n = nums.size();
        for(int i = 0; i < n; i++)
        for(int j = i + 1; j < n; j++)
            if(nums[i] + nums[j] == target)
                return {i, j};
        return {-1};
    }
};


2. Using Map 
TC : O(N LogN) SC : O(N)
TC : O(N) Not Considering Map Complexity (LogN)

class Solution 
{
    public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        int n = nums.size();
        map<int, int> Map;
        for(int i = 0; i < n; i++)
        {
            int Key = target - nums[i];
            if(Map.find(Key) != Map.end())
                return {Map[Key], i};
            Map[nums[i]] = i;
        }
        return {-1};
    }
};


3. Two Pointer Approach (Works Only For Sorted Arrays or Has To Return True/False)
TC : O(N) SC : O(1)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int Left = 0, Right = n - 1;
        while(Left <= Right)
        {
            if(nums[Left] + nums[Right] == target)
                return {Left, Right};
            if(nums[Left] + nums[Right] < target)
                Left++;
            else
                Right--;
        }   
        return {-1};
    }
};