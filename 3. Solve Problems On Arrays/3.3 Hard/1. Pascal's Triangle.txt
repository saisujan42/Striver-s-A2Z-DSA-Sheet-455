1. Using nCr (n-1 C r-1) 
TC : O(C) SC : O(1)
This Approach Is For Problem Where Row & Column index is Given to Find The Value


#include <bits/stdc++.h>
using namespace std;

int nCr(int n, int r) 
{
    long long res = 1;
    for (int i = 0; i < r; i++) 
    {
        res = res * (n - i);
        res = res / (i + 1);
    }
    return res;
}

int pascalTriangle(int r, int c) {
    int element = nCr(r - 1, c - 1);
    return element;
}

    
2. By Generating Each Row
TC : O(N * C) SC : O(1)
TC : O(N) For Each Row with N Elements
This Approach Is Also Used For Problem Where Only A Row Is Asked    
        
class Solution {
public:
    vector<int> GenerateRow(int n)
    {
        vector<int> Row;
        long long int Ans = 1;
        Row.push_back(1);
        for(int i = 1; i < n; i++)
        {
            Ans = Ans * (n - i);
            Ans /= i;
            Row.push_back(Ans);
        }
        return Row;
    }
    vector<vector<int>> generate(int numRows) 
    {
        vector<vector<int>> Answer;  
        for(int i = 1; i <= numRows; i++)
            Answer.push_back(GenerateRow(i));
        return Answer;  
    }
};


3. DP Approach 
TC : O(N^2) SC : O(1) (Not Considering Answer Vector)


class Solution {
public:
    vector<vector<int>> generate(int numRows) 
    {
        vector<vector<int>> Answer;
        for(int i = 0; i < numRows; i++)
        {
            vector<int> Row;
            Row.push_back(1);
            for(int j = 1; j < i; j++)
                Row.push_back(Answer[i - 1][j - 1] + Answer[i - 1][j]);
            if(i != 0)
                Row.push_back(1);
            Answer.push_back(Row);
        }    
        return Answer;
    }
};