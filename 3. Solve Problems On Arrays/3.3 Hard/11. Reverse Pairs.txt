1. Brute Force Approach
TC : O(N^2) SC : O(1)        ->     TLE

class Solution {
public:
    int reversePairs(vector<int>& nums) 
    {
        int n = nums.size();
        int Count = 0;
        for(int i = 0; i < n-1; i++)
            for(int j = i + 1; j < n; j++)
                if((long long) nums[i] > (long long)nums[j] * 2)
                    Count++;
        return Count;
    }
};


2. Using Merge Sort
TC : O(2NLogN) SC : O(N)

class Solution {
public:
    void Merge(vector<int> &arr, int Low, int Mid, int High)
    {
        vector<int> Temp;
        int Left = Low, Right = Mid + 1;
        while(Left <= Mid && Right <= High)
        {
            if(arr[Left] <= arr[Right])
            {
                Temp.push_back(arr[Left]);
                Left++;
            }
            else
            {
                Temp.push_back(arr[Right]);
                Right++;
            }
        }
        while(Left <= Mid)
        {
            Temp.push_back(arr[Left]);
            Left++;
        }
        while(Right <= High)
        {
            Temp.push_back(arr[Right]);
            Right++;
        }
        for(int i = Low; i <= High; i++)
            arr[i] = Temp[i - Low];
    }
    int mergeSort(vector<int> &arr, int Low, int High) 
    {
        int Count = 0;
        if(Low >= High)
            return Count;
        int Mid = (Low + High) / 2;
        Count += mergeSort(arr, Low, Mid);
        Count += mergeSort(arr, Mid + 1, High);
        Count += CountPairs(arr, Low, Mid, High);
        Merge(arr, Low, Mid, High);
        return Count;
    }
    int CountPairs(vector<int> &arr, int Low, int Mid, int High)
    {
        int Right = Mid + 1, Count = 0;
        for(int i = Low; i <= Mid; i++)
        {
            while(Right <= High && arr[i] > 2LL * arr[Right])
                Right++;
            Count += (Right - (Mid + 1));
        }
        return Count;
    }
    int reversePairs(vector<int>& nums) 
    {
        int n = nums.size();
        if(n == 1)
            return 0;
        return mergeSort(nums, 0, n - 1);
    }
};