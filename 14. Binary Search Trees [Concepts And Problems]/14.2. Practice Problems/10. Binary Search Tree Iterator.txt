1. BST Iterator
   Using InOrder Traversal & Store it in a Vector
   Using A Current Pointer to Keep Track Of Current Node

TC : O(N) -> InOrder Traversal 
     O(1) -> next(), hasNext()
SC : O(N) -> To Store InOrder Traversal

class BSTIterator 
{
    public:
    int Current = -1;
    vector<int> Path;
    void InOrder(TreeNode *root)
    {
        if(root == NULL) return;
        InOrder(root -> left);
        Path.push_back(root -> val);
        InOrder(root -> right);
    }
    BSTIterator(TreeNode* root) 
    {
        InOrder(root);
    }
    int next() 
    {
        Current++;
        return Path[Current]; 
    }
    bool hasNext() 
    {
        if(Current + 1 < Path.size())
            return true;
        return false;    
    }
};



2. InOrder Traversal Using Stack
   Push All Left Nodes Into Stack

TC : O(1) -> next(), hasNext()
SC : O(Height)

class BSTIterator 
{
    public:
    stack<TreeNode*> Stack;
    void PushNodes(TreeNode *root)
    {
        while(root != NULL)
        {
            Stack.push(root);
            root = root -> left;
        }
    }
    BSTIterator(TreeNode* root) 
    {
        PushNodes(root);
    }
    int next() 
    {
        TreeNode *temp = Stack.top();
        Stack.pop();
        PushNodes(temp -> right);
        return temp -> val;
    }
    bool hasNext() 
    {
        if(!Stack.empty())
            return true;
        return false;    
    }
};



3. Using BSTIterator
   Using next() and before() as 2-Pointers in a BST
   Instead of Before(), we use bool Reverse to identify next() and before()

TC : O(N) 
SC : O(2H) -> 1H for left, 1H for right

class BSTIterator 
{
    public:
    stack<TreeNode*> Stack;
    bool reverse = true;                              //true -> before()
                                                      //false -> next()
    BSTIterator(TreeNode* root, bool rev) 
    {
        reverse = rev;
        PushNodes(root);
    }
    void PushNodes(TreeNode *root)               
    {
        while(root != NULL)
        {
            Stack.push(root);
            if(reverse == true)
                root = root -> right;
            else
                root = root -> left;
        }
    }
    int next() 
    {
        TreeNode *temp = Stack.top();
        Stack.pop();
        if(!reverse) 
            PushNodes(temp -> right);
        else
            PushNodes(temp -> left);
        return temp -> val;
    }
    bool hasNext() 
    {
        return !Stack.empty();   
    }
};

class Solution 
{
    public:
    bool findTarget(TreeNode* root, int k) 
    {
        BSTIterator Left(root, false);
        BSTIterator Right(root, true);

        int i = Left.next();
        int j = Right.next();
        while(i < j)
        {
            if(i + j == k) return true;
            if(i + j < k) i = Left.next();
            else j = Right.next();
        }
        return false;
    }
};