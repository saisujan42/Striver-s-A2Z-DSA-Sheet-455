1. Using InOrder Traversal
   Store InOrder in Vector & Sort
   Sorting Gives Correct Order
   Copy Vector Back to BST

TC : O(2N + NLogN) SC : O(N)

class Solution {
public:
    void InOrder(TreeNode *root, vector<int> &Path)
    {
        if(root == NULL) return;
        InOrder(root -> left, Path);
        Path.push_back(root -> val);
        InOrder(root -> right, Path);
    }
    void CorrectNodes(TreeNode *root, vector<int> &Path, int &i)
    {
        if(root == NULL) return;
        CorrectNodes(root -> left, Path, i);
        root -> val = Path[i++];
        CorrectNodes(root -> right, Path, i);
    }
    void recoverTree(TreeNode* root) 
    {
        int i = 0;
        vector<int> Path;
        InOrder(root, Path); 
        sort(Path.begin(), Path.end());
        CorrectNodes(root, Path, i);
    }
};



2. Using InOrder Traversal
   Using First, Middle, Last Nodes to Store Swapping Nodes
   First & Middle Nodes Are Swapped if Adjacent
   First & Last Nodes Are Swapped if Not Adjacent

TC : O(N) SC : O(1)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *First, *Middle, *Last, *prev;
    void InOrder(TreeNode *root)
    {
        if(root == NULL) return;
        InOrder(root -> left);
        if(prev != NULL && root -> val < prev -> val)
        {
            if(First == NULL)
                First = prev, Middle = root;
            else
                Last = root;
        }
        prev = root;
        InOrder(root -> right);
    }
    void recoverTree(TreeNode* root) 
    {
        First = Middle = Last = NULL;
        prev = new TreeNode(INT_MIN);
        InOrder(root);

        if(First && Last) 
            swap(First -> val, Last -> val);
        else if(First && Middle)
            swap(First -> val, Middle -> val);
    }
};