1. Using Recursion & BackTracking
   Finding Empty Cells & Checking From 1 to 9
   To Find The Valid Value for that Cell

TC : O(9^M)  M -> Number of Empty Cells
SC : O(M)      -> Recurisve Stack Space

class Solution {
public:
    bool isValid(int i, int j, char ch, vector<vector<char>> &board)
    {
        for(int x = 0; x < 9; x++)
        {
            if(board[i][x] == ch)
                return false;
            if(board[x][j] == ch)
                return false;
            if(board[3 * (i/3) + x/3][3 * (j/3) + x%3] == ch)
                return false;
        }
        return true;
    }
    bool Solve(vector<vector<char>> &board)
    {
        for(int i = 0; i < 9; i++)
        {
            for(int j = 0; j < 9; j++)
            {
                if(board[i][j] == '.')
                {
                    for(char ch = '1'; ch <= '9'; ch++)
                    {
                        if(isValid(i, j, ch, board))
                        {
                            board[i][j] = ch;
                            if(Solve(board) == true)
                                return true;
                            else
                                board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    void solveSudoku(vector<vector<char>>& board) 
    {
        Solve(board);    
    }
};