1. Using Recursion & BackTracking
   Partition After Each Character
   To Check All Combinations
   BackTrack if Not Palindrome

TC : O(N/2 * (2^N))  N/2 -> To Check Palindrome
                     2^N -> To Generate All Partitions
  
SC : O(N * (2^N))    N   -> Recursive Stack Space, Path Array
                     2^N -> Answer Vector 

class Solution {
public:
    bool isPalindrome(int Start, int End, string s)
    {
        while(Start <= End)
        {
            if(s[Start] != s[End])
                return false;
            Start++, End--;
        }
        return true;
    }

    void Recursion(int Index, string s, vector<string> &Path, vector<vector<string>> &Answer)
    {
        if(Index == s.size())
        {
            Answer.push_back(Path);
            return;
        }

        for(int i = Index; i < s.size(); i++)
        {
            if(isPalindrome(Index, i, s))
            {
                string Temp = s.substr(Index, i - Index + 1);
                Path.push_back(Temp);
                Recursion(i + 1, s, Path, Answer);
                Path.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) 
    {
        vector<vector<string>> Answer;
        vector<string> Path;
        Recursion(0, s, Path, Answer);
        return Answer;    
    }
};