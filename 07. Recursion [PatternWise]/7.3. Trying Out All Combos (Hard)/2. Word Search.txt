1. Using DFS & BackTracking
   Using Visited Matrix
   Moving in 4 Directions to Check if Word is Formed

TC : O(N*M * 4^K)   K   -> Length of Word
SC : O(N*M + K)     N*M -> Visited Matrix
		    K   -> Recursive Stack Space

class Solution 
{
    public:
    vector<int> X = {-1, 1, 0, 0};
    vector<int> Y = {0, 0, -1, 1};

    bool DFS(int i, int j, int Index, string word, vector<vector<bool>> &Visited, vector<vector<char>> &board)
    {
        if(Index == word.size())
            return true;

        int n = board.size();
        int m = board[0].size();
        char ch = word[Index];
        Visited[i][j] = true;

        for(int x = 0; x < 4; x++)
        {
            int row = i + X[x];
            int col = j + Y[x];

            if(row >= 0 && row < n && col >= 0 && col < m
            && board[row][col] == ch && !Visited[row][col])
            {
                if(DFS(row, col, Index + 1, word, Visited, board))
                    return true;
            }
        }

        Visited[i][j] = false;
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) 
    {
        int n = board.size();
        int m = board[0].size();
        vector<vector<bool>> Visited(n, vector<bool>(m, false));

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(board[i][j] == word[0])
                {
                    if(DFS(i, j, 1, word, Visited, board))
                        return true;
                }
            }
        }    
        return false;
    }
};