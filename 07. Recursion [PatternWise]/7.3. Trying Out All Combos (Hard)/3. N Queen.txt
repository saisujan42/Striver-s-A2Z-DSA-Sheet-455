1. Using Recursion & BackTracking
   Using IsSafe Function to Check if a Queen Can Be Placed In A Cell
   Each Queen is Placed Column-Wise
   IsSafe is Checked in 3 Directions (Left, Top-Left, Down-Left)
   Because Queen is Placed Column-Wise & Queens Are Not Placed in Other Directions

TC : O(N! * N)
SC : O(N + N^2)  ->  N for Recursive Stack
                 ->  N^2 for Board (Not Considering Answer)

class Solution {
public:
    bool IsSafe(int row, int col, int n, vector<string> &Board)
    {
        int i = row;
        int j = col;

        while(row >= 0 && col >= 0)
        {
            if(Board[row][col] == 'Q')
                return false;
            row--, col--;
        }

        row = i, col = j;
        while(col >= 0)
        {
            if(Board[row][col] == 'Q')
                return false;
            col--;
        }

        row = i, col = j;
        while(row < n && col >= 0)
        {
            if(Board[row][col] == 'Q')
                return false;
            row++, col--;
        }
        return true;
    }
    void Solve(int Col, int n, vector<string> &Board, vector<vector<string>> &Answer)
    {
        if(Col == n)
        {
            Answer.push_back(Board);
            return;
        }

        for(int Row = 0; Row < n; Row++)
        {
            if(IsSafe(Row, Col, n, Board))
            {
                Board[Row][Col] = 'Q';
                Solve(Col + 1, n, Board, Answer);
                Board[Row][Col] = '.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) 
    {
        vector<vector<string>> Answer;
        vector<string> Board(n);

        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                Board[i].push_back('.');
        Solve(0, n, Board, Answer); 
        return Answer;  
    }
};



2. Using Recursion & BackTracking
   Using 3 Arrays To Hash & Check 
   Instead of IsSafe Function

TC : O(N!)
SC : O(N^2 + N + 2(2N-1))   ->  N^2 for Board
			    ->  N for LeftRow Array
			    ->  2N-1 for LowerDiagonal & UpperDiagonal Arrays

class Solution 
{
    public:
    
    void Solve(int Col, int n, vector<bool> &LeftRow, vector<bool> &LowerDiagonal, vector<bool> &UpperDiagonal, vector<string> &Board, vector<vector<string>> &Answer)
    {
        if(Col == n)
        {
            Answer.push_back(Board);
            return;
        }

        for(int Row = 0; Row < n; Row++)
        {
            if(LeftRow[Row] == false && LowerDiagonal[Row + Col] == false && UpperDiagonal[(n-1) + (Col-Row)] == false)
            {
                Board[Row][Col] = 'Q';
                LeftRow[Row] = true;
                LowerDiagonal[Row + Col] = true;
                UpperDiagonal[(n-1) + (Col-Row)] = true;

                Solve(Col + 1, n, LeftRow, LowerDiagonal, UpperDiagonal, Board, Answer);
                
                Board[Row][Col] = '.';
                LeftRow[Row] = false;
                LowerDiagonal[Row + Col] = false;
                UpperDiagonal[(n-1) + (Col-Row)] = false;
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) 
    {
        vector<vector<string>> Answer;
        vector<string> Board(n);

        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                Board[i].push_back('.');

        vector<bool> LeftRow(n, false);
        vector<bool> LowerDiagonal(2*n-1, false);
        vector<bool> UpperDiagonal(2*n-1, false);

        Solve(0, n, LeftRow, LowerDiagonal, UpperDiagonal, Board, Answer); 
        return Answer;  
    }
};