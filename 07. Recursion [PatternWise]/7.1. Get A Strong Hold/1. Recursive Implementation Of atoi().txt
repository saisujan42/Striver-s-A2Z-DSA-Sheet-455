1. Iterative Approach
   Removing WhiteSpaces, Then Checking For + or - Sign
   Then, If Digit Add to Answer, Else Break
   If Value is Greater Than INT_MAX return INT_MAX, if Sign == -1 Retun INT_MIN

TC : O(N)   SC : O(1)

class Solution {
public:
    int myAtoi(string s) 
    {
        int n = s.size();
        long long Answer = 0;
        int Sign = 1, i = 0;

        while(i < n && s[i] == ' ')
            i++;
        if(s[i] == '-')
            i++, Sign = -1;
        else if(s[i] == '+') 
            i++;

        while(i < n)
        {
            if(s[i] >= '0' && s[i] <= '9')
            {
                Answer = (Answer * 10) + (s[i] - '0');
                if(Answer > INT_MAX && Sign == 1)
                    return INT_MAX;
                if(Answer > INT_MAX && Sign == -1)
                    return INT_MIN;
                i++;
            }
            else break;
        }
        return Answer * Sign;
    }
};




2. Recursive Approach
   Removing WhiteSpaces, Then Checking For + or - Sign
   Then, If Digit Add to Answer, Else Break
   If Value is Greater Than INT_MAX return INT_MAX, if Sign == -1 Retun INT_MIN

TC : O(N) 
SC : O(N) -> Recursive Stack Space

class Solution {
public:
    int Recursion(int i, long long Answer, int Sign, string &s)
    {
        int n = s.size();
        if(i >= n)
            return Answer * Sign;
        
        if(s[i] < '0' || s[i] > '9')
            return Answer * Sign;
        
        Answer = (Answer * 10) + (s[i] - '0');

        if(Answer > INT_MAX && Sign == 1) return INT_MAX;
        if(Answer > INT_MAX && Sign == -1) return INT_MIN;

        return Recursion(i + 1, Answer, Sign, s);
    }
    int myAtoi(string s) 
    {
        int n = s.size();
        long long Answer = 0;
        int Sign = 1, i = 0;

        while(i < n && s[i] == ' ')
            i++;
        if(s[i] == '-')
            i++, Sign = -1;
        else if(s[i] == '+') 
            i++;

        return Recursion(i, Answer, Sign, s);
    }
};