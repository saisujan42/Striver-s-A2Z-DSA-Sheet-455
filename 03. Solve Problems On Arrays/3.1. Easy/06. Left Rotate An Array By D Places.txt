1. Rotating K Times
TC : O(N * K) SC : O(1)   -> TLE

class Solution {
public:
    void  OneRotate(vector<int> &nums)
    {
        int n = nums.size();
        int temp = nums[n - 1];
        for(int i = n - 2; i >= 0; i--)
            nums[i + 1] = nums[i];
        nums[0] = temp;
    }
    void rotate(vector<int>& nums, int k) 
    {
        while(k--)
            OneRotate(nums);
    }
};


2. By Shifting K Elements
TC : O(N + K) SC : O(K)

class Solution {
public:
    void rotate(vector<int>& nums, int k) 
    {
        int n = nums.size();
        k = k % n; // N Rotations Get The Same Array
        k = n - k; //Left Rotate By N - K = Right Rotate By K
        vector<int> temp;
        for(int i = 0; i < k; i++)
            temp.push_back(nums[i]);
        for(int i = k; i < n; i++)
            nums[i - k] = nums[i];
        for(int i = n - k; i < n; i++)
            nums[i] = temp[i - (n - k)];
    }
};


3. Copying To New Array 
TC : O(N) & SC : O(N)

class Solution {
public:
    void rotate(vector<int>& nums, int k) 
    {
        int n = nums.size();
        vector<int> Answer(n);
        k %= n;
        for(int i = 0; i < n; i++)
            Answer[(i + k) % n] = nums[i];  
        nums = Answer;
    }
};


4. By Reversing The Array 
TC : O(2n) & SC : O(1)

class Solution {
public:
    void rotate(vector<int>& nums, int k) 
    {
        k = k % nums.size();
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin()+k);
        reverse(nums.begin()+k, nums.end());
    }
};