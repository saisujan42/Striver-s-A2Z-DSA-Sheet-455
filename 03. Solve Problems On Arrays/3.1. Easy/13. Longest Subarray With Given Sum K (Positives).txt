1. Brute Force Approach
TC : O(N^2) SC : O(1)   ->  TLE

class Solution{
    public:
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        int MaxLength = 0;
        for(int i = 0; i < N; i++)
        {
            int Sum = 0;
            for(int j = i; j < N; j++)
            {
                Sum += A[j];
                if(Sum == K)
                    MaxLength = max(MaxLength, j - i + 1);
                if(Sum > K)
                    break;
            }
        }
        return MaxLength;
    } 
};



2. Using Map
TC : O(N) SC : O(N)

class Solution{
    public:
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        unordered_map<int, int> Map;
        int Sum = 0, MaxLen = 0;
        for(int i = 0; i < N; i++)
        {
            Sum += A[i];
            if(Sum == K)
                MaxLen = max(MaxLen, i + 1);
            if(Map.find(Sum - K) != Map.end())
                MaxLen = max(MaxLen, i - Map[Sum - K]);
            if(Map.find(Sum) == Map.end())
                Map[Sum] = i;
        }
        return MaxLen;
    } 
};


3. Two Pointer Technique
TC : O(N) SC : O(1)

class Solution{
    public:
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        int Sum = 0, Start = 0, End = 0, Size = 0;
        while(End < N)
        {
            if(Sum + A[End] == K)
            {
                Sum += A[End];
                Size = max(Size, End - Start + 1);
                End++;
            }
            else if(Sum + A[End] < K)
            {
                Sum += A[End];
                End++;
            }
            else if(Sum + A[End] > K)
            {
                Sum -= A[Start];
                Start++;
            }
        }
        return Size;
    } 

};