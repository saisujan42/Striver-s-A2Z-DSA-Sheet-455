1. Use 2 Arrays - Positives & Negatives
TC : O(2N) SC : O(N)

This Approach Works With Modifications if (No. Of Positives != No. Of Negatives)

class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) 
    {
        int n = nums.size();
        vector<int> Positive, Negative;
        for(int i = 0; i < n; i++)
        {
            if(nums[i] > 0)
                Positive.push_back(nums[i]);
            else
                Negative.push_back(nums[i]);
        }    
        for(int i = 0; i < n/2; i++)
        {
            nums[2 * i] = Positive[i];
            nums[2 * i + 1] = Negative[i];
        }
        return nums;
    }
};


2. Two Pointer Approach 
TC : O(N) SC : O(N)
This Approach Doesn't Work if (No. Of Positives != No. Of Negatives)

class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) 
    {
        int n = nums.size(), Positive = 0, Negative = 1;
        vector<int> Answer(n);
        for(int i = 0; i < n; i++)
        {
            if(nums[i] > 0)
                Answer[Positive] = nums[i], Positive += 2;
            else
                Answer[Negative] = nums[i], Negative += 2;
        }
        return Answer;
    }
};