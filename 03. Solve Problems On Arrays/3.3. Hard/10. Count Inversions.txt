1. Brute Force Approach 
TC : O(N^2) SC : O(1)      ->       TLE

class Solution {
  public:
    long long int inversionCount(long long arr[], int n) 
    {
        int Count = 0;
        for(int i = 0; i < n - 1; i++)
            for(int j = i + 1; j < n; j++)
                if(arr[i] > arr[j])
                    Count++;
        return Count;
    }
};


2. Using Merge Sort & Two Pointers During Merge to Count
TC : O(NLogN) SC : O(N)

class Solution {
  public:
    
    long long Merge(long long arr[], int Low, int Mid, int High)
    {
        vector<long long> Temp;
        int Left = Low, Right = Mid + 1;
        long long Count = 0;
        while(Left <= Mid && Right <= High)
        {
            if(arr[Left] <= arr[Right])
            {
                Temp.push_back(arr[Left]);
                Left++;
            }
            else
            {
                Temp.push_back(arr[Right]);
                Count += (Mid - Left + 1);
                Right++;
            }
        }
        while(Left <= Mid)
        {
            Temp.push_back(arr[Left]);
            Left++;
        }
        while(Right <= High)
        {
            Temp.push_back(arr[Right]);
            Right++;
        }
        for(int i = Low; i <= High; i++)
            arr[i] = Temp[i - Low];
        return Count;
    }
    long long mergeSort(long long arr[], int Low, int High) 
    {
        long long Count = 0;
        if(Low >= High)
            return Count;
        int Mid = (Low + High) / 2;
        Count += mergeSort(arr, Low, Mid);
        Count += mergeSort(arr, Mid + 1, High);
        Count += Merge(arr, Low, Mid, High);
        return Count;
    }

    long long int inversionCount(long long arr[], int n) 
    {
        if(n == 1)
            return 0;
        return mergeSort(arr, 0, n - 1);
    }
};