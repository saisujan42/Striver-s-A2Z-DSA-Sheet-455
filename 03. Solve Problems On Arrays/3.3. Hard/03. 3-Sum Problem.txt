1. Brute Force Approach 
TC : O(N^3) SC : O(2 * No. Of Triplets)    ->    TLE

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        int n = nums.size();
        set<vector<int>> Set;
        for(int i = 0; i < n - 2; i++)
        {
            for(int j = i + 1; j < n - 1; j++)
            {
                for(int k = j + 1; k < n; k++)
                {
                    if(nums[i] + nums[j] + nums[k] == 0)
                    {
                        vector<int> Temp;
                        Temp = {nums[i], nums[j], nums[k]};
                        sort(Temp.begin(), Temp.end());
                        Set.insert(Temp);
                    }
                }
            }
        }
        vector<vector<int>> Answer(Set.begin(), Set.end());
        return Answer;
    }
};



2. Using Map   
TC : O(N^2) SC : O(2 * No.Of Triplets)    ->     TLE

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        int n = nums.size();
        set<vector<int>> MainSet;
        for(int i = 0; i < n - 1; i++)
        {
            set<int> Set;
            for(int j = i + 1; j < n; j++)
            {
                int k = -(nums[i] + nums[j]);    
                if(Set.find(k) != Set.end())
                {
                    vector<int> Temp;
                    Temp = {nums[i], nums[j], k};
                    sort(Temp.begin(), Temp.end());
                    MainSet.insert(Temp);
                }
                Set.insert(nums[j]);
            }
        }
        vector<vector<int>> Answer(MainSet.begin(), MainSet.end());
        return Answer;
    }
};


3. Using 3 Pointers  
TC : O(N LogN + N^2) SC : O(No. Of Triplets)
TC : O(NLogN) For Sorting

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> Answer;

        for(int i = 0; i < n - 2; i++)
        {
            if(i > 0 && nums[i] == nums[i - 1])
                continue;
            int j = i + 1, k = n - 1;
            while(j < k)
            {
                int Sum = nums[i] + nums[j] + nums[k];
                if(Sum < 0)
                    j++;
                else if(Sum > 0)
                    k--;
                else
                {
                    Answer.push_back({nums[i], nums[j], nums[k]});
                    j++, k--;
                    while(j < k && nums[j] == nums[j - 1]) j++;
                    while(j < k && nums[k] == nums[k + 1]) k--;
                }
            }
        }
        return Answer;
    }
};