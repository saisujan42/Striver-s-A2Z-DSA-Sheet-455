1. Brute Force Approach (Linear Search)
TC : O(N * MaxValue) SC : O(1)          ->      TLE

class Solution {
public:
    int smallestDivisor(vector<int>& nums, int threshold) 
    {
        int n = nums.size();
        int Maximum = *max_element(nums.begin(), nums.end());
        for(int i = 1; i <= Maximum; i++)
        {
            int Sum = 0;
            for(int j = 0; j < n; j++)
                Sum += ceil((double)nums[j] / (double)i);
            if(Sum <= threshold)
                return i;
        }
        return -1;
    }
};


2. Binary Search
TC : O(N * Log(MaxValue)) SC : O(1)

class Solution {
public:
    bool isLessThanThreshold(int i, int threshold, vector<int> &nums)
    {
        int n = nums.size();
        int Sum = 0;
        for(int j = 0; j < n; j++)
            Sum += ceil((double)nums[j] / (double)i);
        return Sum <= threshold;
    }
    int smallestDivisor(vector<int>& nums, int threshold) 
    {
        int Low = 1;
        int High = *max_element(nums.begin(), nums.end());
        while(Low <= High)
        {
            int Mid = (Low + High) / 2;
            if(isLessThanThreshold(Mid, threshold, nums))
                High = Mid - 1;
            else
                Low = Mid + 1;
        }
        return Low;
    }
};