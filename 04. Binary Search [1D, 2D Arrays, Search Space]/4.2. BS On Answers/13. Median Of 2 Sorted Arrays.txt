1. Push To One Vector And Sorting To Find Median
TC : O(N2 + (N1 + N2)Log(N1 + N2)) SC : O(N2)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
        int n = nums2.size();
        for(int i = 0; i < n; i++)
            nums1.push_back(nums2[i]);
        sort(nums1.begin(),nums1.end());
        n = nums1.size();
        double d;
        if(n%2!=0)
            d = nums1[n/2];
        else
            d = (double)(nums1[n / 2] + nums1[(n / 2) - 1]) / 2;
        return d;
    }
};


2. Merge 2 Arrays & Find Median
TC : O(N1 + N2) SC : O(N1 + N2)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
        int n1 = nums1.size();
        int n2 = nums2.size();
        int n = n1 + n2;
        vector<int> v;
        int i = 0, j = 0; 
        while(i < n1 && j < n2)
        {
            if(nums1[i] < nums2[j])
                v.push_back(nums1[i++]);
            else
                v.push_back(nums2[j++]);
        }
        while(i < n1)
            v.push_back(nums1[i++]);
        while(j < n2)
            v.push_back(nums2[j++]);
        if(n % 2 != 0)
            return v[n / 2];
        return ((double)v[n / 2] + (double)v[n / 2 - 1]) / 2.0;
    }
};



3. Using 2-Pointer Approach
TC : O(N1 + N2) SC : O(1)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
        int n1 = nums1.size();
        int n2 = nums2.size();
        int n = n1 + n2, Count = 0, i = 0, j = 0;
        int Value1 = -1, Value2 = -1, Index1 = n / 2 - 1, Index2 = n / 2;
        while(i < n1 && j < n2)
        {
            if(nums1[i] < nums2[j])
            {
                if(Count == Index1) Value1 = nums1[i];
                if(Count == Index2) Value2 = nums1[i];
                Count++, i++;
            }
            else
            {
                if(Count == Index1) Value1 = nums2[j];
                if(Count == Index2) Value2 = nums2[j];
                Count++, j++;
            }
        }
        while(i < n1)
        {
            if(Count == Index1) Value1 = nums1[i];
            if(Count == Index2) Value2 = nums1[i];
            Count++, i++;
        }
        while(j < n2)
        {
            if(Count == Index1) Value1 = nums2[j];
            if(Count == Index2) Value2 = nums2[j];
            Count++, j++;
        }
        if(n % 2 != 0)
            return Value2;
        return ((double)Value1 + (double)Value2) / 2.0;
    }
};


4. Binary Search
TC : O(Log(Min(N1, N2))) SC : O(1)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
        int n1 = nums1.size();
        int n2 = nums2.size();
        int n = n1 + n2;
        if(n1 == 0)
        {
            if(n2 % 2 != 0)
                return nums2[n2 / 2];
            return ((double)(nums2[n2 / 2] + nums2[n2 /2 - 1])) / 2.0;
        }
        if(n2 == 0)
        {
            if(n1 % 2 != 0)
                return nums1[n1 / 2];
            return ((double)(nums1[n1 / 2] + nums1[n1 / 2 - 1])) / 2.0;
        }
        if(n1 > n2)
            return findMedianSortedArrays(nums2, nums1);
        int Low = 0, High = n1, l1, l2, r1, r2;
        int Left = (n1 + n2 + 1) / 2;
        while(Low <= High)
        {
            int Mid1 = (Low + High) / 2;
            int Mid2 = Left - Mid1;
            l1 = l2 = INT_MIN, r1 = r2 = INT_MAX;
            if(Mid1 - 1 >= 0) l1 = nums1[Mid1 - 1];
            if(Mid2 - 1 >= 0) l2 = nums2[Mid2 - 1];
            if(Mid1 < n1) r1 = nums1[Mid1];
            if(Mid2 < n2) r2 = nums2[Mid2];

            if(l1 <= r2 && l2 <= r1)
            {
                if(n % 2 != 0)
                    return max(l1, l2);
                return ((double)(max(l1, l2) + min(r1, r2))) / 2.0;
            }
            if(l1 > r2)
                High = Mid1 - 1;
            else
                Low = Mid1 + 1;
        }
        return 0;
    }
};