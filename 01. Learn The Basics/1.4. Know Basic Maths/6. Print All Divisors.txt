1. Iterating From 1 to N 
TC : O(N) for Each Number , Total TC : O(N * I) SC : O(1)

class Solution
{
public:
    long long FindSum(int N)
    {
        long long Sum = 0;
        for(long long i = 1; i <= N; i++)
            if(N % i == 0)
                Sum += i;
        return Sum;
    }
    long long sumOfDivisors(int N)
    {
        long long Sum = 0;
        for(int i = 1; i <= N; i++)
            Sum += FindSum(i);
        return Sum;
    }
};


2. Iterating From 1 To Sqrt(N)
TC : O(Sqrt(N)) for Each Number , Total TC : O(Sqrt(I) * N) SC : O(1)

class Solution
{
public:
    long long FindSum(int N)
    {
        long long Sum = 0;
        for(long long i = 1; i <= sqrt(N); i++)
        {
            if(N % i == 0)
            {
                if(N / i == i)
                    Sum += i;
                else
                    Sum += (i + N/i);
            }
        }
        return Sum;
    }
    long long sumOfDivisors(int N)
    {
        long long Sum = 0;
        for(int i = 1; i <= N; i++)
            Sum += FindSum(i);
        return Sum;
    }
};


3. Sum Of All Divisors 
TC : O(N) SC : O(1)

class Solution
{
    public:
    long long sumOfDivisors(int N)
    {
        long long Sum = 0;
        for(int i = 1; i <= N; i++)
            Sum += (N / i) * i;
        return Sum;
    }
};


