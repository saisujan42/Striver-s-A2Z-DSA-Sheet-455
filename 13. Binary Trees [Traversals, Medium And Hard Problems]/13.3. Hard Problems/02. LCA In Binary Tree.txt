1. Brute Force Approach
   Find Individual Paths To Nodes From Root
   Then Use These Paths To Find Least Common Ancestor

TC : O(2N) SC : O(2N)

class Solution {
public:
    bool FindPath(TreeNode *root, TreeNode *p, vector<TreeNode*> &Path)
    {
        if(root == NULL) return false;
        Path.push_back(root);
        if(root == p) return true;

        if(FindPath(root -> left, p, Path) || FindPath(root -> right, p, Path))
            return true;
        Path.pop_back();
        return false;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        if(root == NULL || root == p || root == q)
            return root;
        vector<TreeNode*> First, Second; 
        FindPath(root, p, First);
        FindPath(root, q, Second);  

        TreeNode *Answer;
        int n = First.size(), m = Second.size();
        for(int i = 0; i < min(n, m); i++)
            if(First[i] == Second[i])
                Answer = First[i];
        return Answer;  
    }
};


2. DFS Traversal
   Returning The Node if Node is Found

TC : O(N) 
SC : O(N)  ->  Recursive Stack Space

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        if(root == NULL || root == p || root == q)
            return root;

        TreeNode *Left = lowestCommonAncestor(root -> left, p, q);
        TreeNode *Right = lowestCommonAncestor(root -> right, p, q);

        if(Left == NULL) return Right;
        else if(Right == NULL) return Left;
        else return root;
    }
};
