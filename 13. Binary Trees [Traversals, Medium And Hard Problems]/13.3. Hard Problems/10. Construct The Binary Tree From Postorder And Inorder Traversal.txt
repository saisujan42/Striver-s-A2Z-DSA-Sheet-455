1. InOrder & PostOrder
   Using Map to Store Indices of InOrder
   Building Binary Tree using Recursion

TC : O(N) SC : O(N)

class Solution 
{
    public:
    TreeNode *BuildTree(unordered_map<int, int> &Map, vector<int> &inorder, int inStart, int inEnd, vector<int> &postorder, int postStart, int postEnd)
    {
        if(inStart > inEnd || postStart > postEnd)
            return NULL;
        
        TreeNode *root = new TreeNode(postorder[postEnd]);
        int inRoot = Map[root -> val];
        int numsLeft = inRoot - inStart;

        root -> left = BuildTree(Map, inorder, inStart, inRoot - 1, postorder, postStart, postStart + numsLeft - 1);
        root -> right = BuildTree(Map, inorder, inRoot + 1, inEnd, postorder, postStart + numsLeft, postEnd - 1);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) 
    {
        int n = inorder.size();
        unordered_map<int, int> Map;
        for(int i = 0; i < n; i++)
            Map[inorder[i]] = i;
        return BuildTree(Map, inorder, 0, n - 1, postorder, 0, n - 1);    
    }
};