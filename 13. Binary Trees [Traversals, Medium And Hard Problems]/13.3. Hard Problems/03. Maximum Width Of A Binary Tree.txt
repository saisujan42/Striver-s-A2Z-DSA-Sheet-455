1. Using Level Order Traversal
   Assigning Index To Nodes (ith Node has Children 2*i+1 and 2*i+2)

TC : O(N) SC : O(Max Nodes In A Level)

class Solution 
{
    public:
    int widthOfBinaryTree(TreeNode* root) 
    {
        int Width = 1;
        queue<pair<TreeNode*, int>> Queue;
        Queue.push({root, 0});
        while(!Queue.empty())
        {
            int Size = Queue.size();
            int Min = Queue.front().second;
            int First, Last;
            for(int i = 0; i < Size; i++)
            {
                int Index = Queue.front().second;
                TreeNode *node = Queue.front().first;
                Queue.pop();

                if(i == 0) First = Index;
                if(i == Size - 1) Last = Index;

                if(node -> left) 
                    Queue.push({node -> left, 2LL * Index + 1});
                if(node -> right)
                    Queue.push({node -> right, 2LL * Index + 2});
            }
            Width = max(Width, Last - First + 1);
        }
        return Width;
    }
};