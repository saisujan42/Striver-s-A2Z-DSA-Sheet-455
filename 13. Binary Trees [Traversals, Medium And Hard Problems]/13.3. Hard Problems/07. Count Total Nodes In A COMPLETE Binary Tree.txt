1. Brute Force Approach
   Use Any Traversal to Count All Nodes

TC : O(N) SC : O(H)

class Solution {
    public:
    void InOrder(TreeNode* root, int &Count)
    {
        if(root == NULL) return;
        Count++;
        InOrder(root -> left, Count);
        InOrder(root -> right, Count);
    }
    int countNodes(TreeNode* root) 
    {
        int Count = 0;
        InOrder(root, Count);
        return Count;    
    }
};



2. As Given Tree is a Complete Binary Tree
   Finding Left & Right Height To Count Total Nodes

TC : O((LogN) ^ 2) = O(Sq(LogN))
SC : O(LogN) -> Recursive Stack Space

class Solution {
    public:
    int FindLeftHeight(TreeNode *root)
    {
        int Height = 0;
        while(root != NULL)
        {
            Height++;
            root = root -> left;
        }
        return Height;
    }
    int FindRightHeight(TreeNode *root)
    {
        int Height = 0;
        while(root != NULL)
        {
            Height++;
            root = root -> right;
        }
        return Height;
    }
    int countNodes(TreeNode* root) 
    {
        if(root == NULL) return 0;

        int Left = FindLeftHeight(root);
        int Right = FindRightHeight(root);
        if(Left == Right)
            return pow(2, Left) - 1; 
        return 1 + countNodes(root -> left) + countNodes(root -> right);
    }
};

