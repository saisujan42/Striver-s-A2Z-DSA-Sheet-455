1. Converting Array Into Binary Tree

TC : O(N) SC : O(1) 

/*struct node {
  int data;
  struct node *left;
  struct node *right;
};

struct node *newNode(int data) {
  struct node *node = (struct node *)malloc(sizeof(struct node));

  node->data = data;

  node->left = NULL;
  node->right = NULL;
  return (node);
}*/

class Solution{
public:

    void create_tree(node* root0, vector<int> &vec)
    {
        int n = vec.size();
        queue<node*> Queue;
        Queue.push(root0);
        for(int i = 1; i < n; i++)
        {
            node * temp = Queue.front();
            if(temp -> left == NULL)
            {
                node * newnode = newNode(vec[i]);
                temp -> left = newnode;
                Queue.push(newnode);
            }
            else if(temp -> right == NULL)
            {
                node * newnode = newNode(vec[i]);
                temp -> right = newnode;
                Queue.push(newnode);
                Queue.pop();
            }
        }
    }

};



2. Given For This Problem That Only 7 Integers Are Present in Array
TC : O(1) SC : O(1)


/*struct node {
  int data;
  struct node *left;
  struct node *right;
};

struct node *newNode(int data) {
  struct node *node = (struct node *)malloc(sizeof(struct node));

  node->data = data;

  node->left = NULL;
  node->right = NULL;
  return (node);
}*/

class Solution{
public:

    void create_tree(node* root0, vector<int> &vec)
    {
        root0 -> left = newNode(vec[1]);
        root0 -> right = newNode(vec[2]);
        
        root0 -> left -> left = newNode(vec[3]);
        root0 -> left -> right = newNode(vec[4]);
        
        root0 -> right -> left = newNode(vec[5]);
        root0 -> right -> right = newNode(vec[6]);
    }

};